# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cares_msgs/Vine.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cares_msgs.msg
import geometry_msgs.msg

class Vine(genpy.Message):
  _md5sum = "12a641acbf6a778d8aed58c6eaa43379"
  _type = "cares_msgs/Vine"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """cares_msgs/Cane[] cane_list
================================================================================
MSG: cares_msgs/Cane
uint8 cane_id
uint8 cane_type

float64 internode_length
float64 internode_width
uint8 node_count

cares_msgs/Node[] node_list
cares_msgs/Node origin_node

================================================================================
MSG: cares_msgs/Node
uint32 node_id

#Node Type
uint8  PRIMARY_ORIGIN_NODE = 0
uint8  REGULAR_NODE = 1
uint8  MULTI_NODE = 2
uint8  UNLINKED_NODE = 3
uint8  node_type

geometry_msgs/Point position

uint32 sequencial_neighbour_id
cares_msgs/NodeNeighbourInfo[] neighbours


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: cares_msgs/NodeNeighbourInfo
uint32 neighbour_id
float64 internode_length
float64 internode_width"""
  __slots__ = ['cane_list']
  _slot_types = ['cares_msgs/Cane[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cane_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Vine, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cane_list is None:
        self.cane_list = []
    else:
      self.cane_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.cane_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.cane_list:
        _x = val1
        buff.write(_get_struct_2B2dB().pack(_x.cane_id, _x.cane_type, _x.internode_length, _x.internode_width, _x.node_count))
        length = len(val1.node_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.node_list:
          _x = val2
          buff.write(_get_struct_IB().pack(_x.node_id, _x.node_type))
          _v1 = val2.position
          _x = _v1
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2.sequencial_neighbour_id
          buff.write(_get_struct_I().pack(_x))
          length = len(val2.neighbours)
          buff.write(_struct_I.pack(length))
          for val3 in val2.neighbours:
            _x = val3
            buff.write(_get_struct_I2d().pack(_x.neighbour_id, _x.internode_length, _x.internode_width))
        _v2 = val1.origin_node
        _x = _v2
        buff.write(_get_struct_IB().pack(_x.node_id, _x.node_type))
        _v3 = _v2.position
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v2.sequencial_neighbour_id
        buff.write(_get_struct_I().pack(_x))
        length = len(_v2.neighbours)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.neighbours:
          _x = val3
          buff.write(_get_struct_I2d().pack(_x.neighbour_id, _x.internode_length, _x.internode_width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cane_list is None:
        self.cane_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cane_list = []
      for i in range(0, length):
        val1 = cares_msgs.msg.Cane()
        _x = val1
        start = end
        end += 19
        (_x.cane_id, _x.cane_type, _x.internode_length, _x.internode_width, _x.node_count,) = _get_struct_2B2dB().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.node_list = []
        for i in range(0, length):
          val2 = cares_msgs.msg.Node()
          _x = val2
          start = end
          end += 5
          (_x.node_id, _x.node_type,) = _get_struct_IB().unpack(str[start:end])
          _v4 = val2.position
          _x = _v4
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 4
          (val2.sequencial_neighbour_id,) = _get_struct_I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.neighbours = []
          for i in range(0, length):
            val3 = cares_msgs.msg.NodeNeighbourInfo()
            _x = val3
            start = end
            end += 20
            (_x.neighbour_id, _x.internode_length, _x.internode_width,) = _get_struct_I2d().unpack(str[start:end])
            val2.neighbours.append(val3)
          val1.node_list.append(val2)
        _v5 = val1.origin_node
        _x = _v5
        start = end
        end += 5
        (_x.node_id, _x.node_type,) = _get_struct_IB().unpack(str[start:end])
        _v6 = _v5.position
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v5.sequencial_neighbour_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v5.neighbours = []
        for i in range(0, length):
          val3 = cares_msgs.msg.NodeNeighbourInfo()
          _x = val3
          start = end
          end += 20
          (_x.neighbour_id, _x.internode_length, _x.internode_width,) = _get_struct_I2d().unpack(str[start:end])
          _v5.neighbours.append(val3)
        self.cane_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.cane_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.cane_list:
        _x = val1
        buff.write(_get_struct_2B2dB().pack(_x.cane_id, _x.cane_type, _x.internode_length, _x.internode_width, _x.node_count))
        length = len(val1.node_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.node_list:
          _x = val2
          buff.write(_get_struct_IB().pack(_x.node_id, _x.node_type))
          _v7 = val2.position
          _x = _v7
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2.sequencial_neighbour_id
          buff.write(_get_struct_I().pack(_x))
          length = len(val2.neighbours)
          buff.write(_struct_I.pack(length))
          for val3 in val2.neighbours:
            _x = val3
            buff.write(_get_struct_I2d().pack(_x.neighbour_id, _x.internode_length, _x.internode_width))
        _v8 = val1.origin_node
        _x = _v8
        buff.write(_get_struct_IB().pack(_x.node_id, _x.node_type))
        _v9 = _v8.position
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v8.sequencial_neighbour_id
        buff.write(_get_struct_I().pack(_x))
        length = len(_v8.neighbours)
        buff.write(_struct_I.pack(length))
        for val3 in _v8.neighbours:
          _x = val3
          buff.write(_get_struct_I2d().pack(_x.neighbour_id, _x.internode_length, _x.internode_width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cane_list is None:
        self.cane_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cane_list = []
      for i in range(0, length):
        val1 = cares_msgs.msg.Cane()
        _x = val1
        start = end
        end += 19
        (_x.cane_id, _x.cane_type, _x.internode_length, _x.internode_width, _x.node_count,) = _get_struct_2B2dB().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.node_list = []
        for i in range(0, length):
          val2 = cares_msgs.msg.Node()
          _x = val2
          start = end
          end += 5
          (_x.node_id, _x.node_type,) = _get_struct_IB().unpack(str[start:end])
          _v10 = val2.position
          _x = _v10
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 4
          (val2.sequencial_neighbour_id,) = _get_struct_I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.neighbours = []
          for i in range(0, length):
            val3 = cares_msgs.msg.NodeNeighbourInfo()
            _x = val3
            start = end
            end += 20
            (_x.neighbour_id, _x.internode_length, _x.internode_width,) = _get_struct_I2d().unpack(str[start:end])
            val2.neighbours.append(val3)
          val1.node_list.append(val2)
        _v11 = val1.origin_node
        _x = _v11
        start = end
        end += 5
        (_x.node_id, _x.node_type,) = _get_struct_IB().unpack(str[start:end])
        _v12 = _v11.position
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v11.sequencial_neighbour_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v11.neighbours = []
        for i in range(0, length):
          val3 = cares_msgs.msg.NodeNeighbourInfo()
          _x = val3
          start = end
          end += 20
          (_x.neighbour_id, _x.internode_length, _x.internode_width,) = _get_struct_I2d().unpack(str[start:end])
          _v11.neighbours.append(val3)
        self.cane_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2dB = None
def _get_struct_2B2dB():
    global _struct_2B2dB
    if _struct_2B2dB is None:
        _struct_2B2dB = struct.Struct("<2B2dB")
    return _struct_2B2dB
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_I2d = None
def _get_struct_I2d():
    global _struct_I2d
    if _struct_I2d is None:
        _struct_I2d = struct.Struct("<I2d")
    return _struct_I2d
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB

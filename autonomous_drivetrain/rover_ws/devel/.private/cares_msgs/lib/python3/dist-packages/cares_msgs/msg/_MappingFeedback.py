# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cares_msgs/MappingFeedback.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cares_msgs.msg

class MappingFeedback(genpy.Message):
  _md5sum = "6ae1ba1e50a20d1a52a1745cc6000ec6"
  _type = "cares_msgs/MappingFeedback"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback

#Enumeration
uint8 INIT       = 0
uint8 SCANNING   = 1
uint8 EXTRACTING = 2
uint8 ACTUATING  = 3
uint8 STOPPING   = 4
#Task status
uint8 status

cares_msgs/ScanningFeedback[] scanning_feedback
cares_msgs/MetricExtractionFeedback[] metric_feedback

uint8 count
uint8 total


================================================================================
MSG: cares_msgs/ScanningFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback

#Enumeration
uint8 INIT       = 0
uint8 MARKER     = 1
uint8 CAPTURING  = 2
uint8 ERROR      = 3
#Task status
uint8 status

#Enumeration
uint8 MOVING  = 4
uint8 IDLE    = 5
uint8 arm_status


================================================================================
MSG: cares_msgs/MetricExtractionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback definition
#Enumeration
uint8 CAPTURING = 0
uint8 MEASURING = 1
#Task status
uint8 status

uint8 processed
uint8 queued

"""
  # Pseudo-constants
  INIT = 0
  SCANNING = 1
  EXTRACTING = 2
  ACTUATING = 3
  STOPPING = 4

  __slots__ = ['status','scanning_feedback','metric_feedback','count','total']
  _slot_types = ['uint8','cares_msgs/ScanningFeedback[]','cares_msgs/MetricExtractionFeedback[]','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,scanning_feedback,metric_feedback,count,total

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MappingFeedback, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
      if self.scanning_feedback is None:
        self.scanning_feedback = []
      if self.metric_feedback is None:
        self.metric_feedback = []
      if self.count is None:
        self.count = 0
      if self.total is None:
        self.total = 0
    else:
      self.status = 0
      self.scanning_feedback = []
      self.metric_feedback = []
      self.count = 0
      self.total = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.status
      buff.write(_get_struct_B().pack(_x))
      length = len(self.scanning_feedback)
      buff.write(_struct_I.pack(length))
      for val1 in self.scanning_feedback:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.status, _x.arm_status))
      length = len(self.metric_feedback)
      buff.write(_struct_I.pack(length))
      for val1 in self.metric_feedback:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.status, _x.processed, _x.queued))
      _x = self
      buff.write(_get_struct_2B().pack(_x.count, _x.total))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.scanning_feedback is None:
        self.scanning_feedback = None
      if self.metric_feedback is None:
        self.metric_feedback = None
      end = 0
      start = end
      end += 1
      (self.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.scanning_feedback = []
      for i in range(0, length):
        val1 = cares_msgs.msg.ScanningFeedback()
        _x = val1
        start = end
        end += 2
        (_x.status, _x.arm_status,) = _get_struct_2B().unpack(str[start:end])
        self.scanning_feedback.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.metric_feedback = []
      for i in range(0, length):
        val1 = cares_msgs.msg.MetricExtractionFeedback()
        _x = val1
        start = end
        end += 3
        (_x.status, _x.processed, _x.queued,) = _get_struct_3B().unpack(str[start:end])
        self.metric_feedback.append(val1)
      _x = self
      start = end
      end += 2
      (_x.count, _x.total,) = _get_struct_2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.status
      buff.write(_get_struct_B().pack(_x))
      length = len(self.scanning_feedback)
      buff.write(_struct_I.pack(length))
      for val1 in self.scanning_feedback:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.status, _x.arm_status))
      length = len(self.metric_feedback)
      buff.write(_struct_I.pack(length))
      for val1 in self.metric_feedback:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.status, _x.processed, _x.queued))
      _x = self
      buff.write(_get_struct_2B().pack(_x.count, _x.total))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.scanning_feedback is None:
        self.scanning_feedback = None
      if self.metric_feedback is None:
        self.metric_feedback = None
      end = 0
      start = end
      end += 1
      (self.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.scanning_feedback = []
      for i in range(0, length):
        val1 = cares_msgs.msg.ScanningFeedback()
        _x = val1
        start = end
        end += 2
        (_x.status, _x.arm_status,) = _get_struct_2B().unpack(str[start:end])
        self.scanning_feedback.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.metric_feedback = []
      for i in range(0, length):
        val1 = cares_msgs.msg.MetricExtractionFeedback()
        _x = val1
        start = end
        end += 3
        (_x.status, _x.processed, _x.queued,) = _get_struct_3B().unpack(str[start:end])
        self.metric_feedback.append(val1)
      _x = self
      start = end
      end += 2
      (_x.count, _x.total,) = _get_struct_2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B

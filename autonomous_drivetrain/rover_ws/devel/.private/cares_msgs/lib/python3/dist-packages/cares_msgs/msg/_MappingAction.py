# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cares_msgs/MappingAction.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actionlib_msgs.msg
import cares_msgs.msg
import genpy
import geometry_msgs.msg
import moveit_msgs.msg
import shape_msgs.msg
import std_msgs.msg

class MappingAction(genpy.Message):
  _md5sum = "1d01f4e9451b022cf7181e0f6c86b66f"
  _type = "cares_msgs/MappingAction"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

MappingActionGoal action_goal
MappingActionResult action_result
MappingActionFeedback action_feedback

================================================================================
MSG: cares_msgs/MappingActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
MappingGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: cares_msgs/MappingGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
# Mapping Command Enumeration
uint8 STOP    = 0
uint8 MAP     = 1
uint8 ACTUATE = 3 # e.g. prune/pick/thin

uint8 command

# World Link
std_msgs/String world_link

# To seek out alignment marker or not before scanning
std_msgs/Bool get_marker

# Path ID from path factory to generate scanning path
uint8 path_id

geometry_msgs/PoseStamped init_pose
geometry_msgs/PointStamped rail_pose
geometry_msgs/PointStamped rail_marker_target

cares_msgs/ScanningGoal[] scanning_goals
cares_msgs/MetricExtractionGoal metric_goal

cares_msgs/PathPlanningConstraints path_constraints


================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Bool
bool data
================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: cares_msgs/ScanningGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
# Arm Command Enumeration
uint8 STOP       = 0
uint8 START      = 1
uint8 GET_MARKER = 2
uint8 MAP        = 3
uint8 MOVE       = 4 # Move Arm to Position
uint8 ACTUATE    = 5 # e.g. prune/pick/thin

# Arm command
uint8 command

# Marker Type
uint8 MARKER_ARUCO = 0
uint8 MARKER_CHARUCO = 1
uint8 marker_type

# Initial Pose to move arm too
geometry_msgs/PoseStamped pose
geometry_msgs/PointStamped rail_pose
geometry_msgs/PointStamped rail_marker_target

# Planning Link
std_msgs/String planning_link

# World Link
std_msgs/String world_link

# Path to save data too
std_msgs/String file_path

cares_msgs/PathPlanningConstraints path_constraints


================================================================================
MSG: cares_msgs/PathPlanningConstraints
# Orientation Constraint Type
uint8 DEFAULT_ORIENT = 0
uint8 NO_ORIENT = 1
uint8 FIXED_ORIENT = 2
uint8 BETWEEN_ORIENT = 3

uint8 orientation_constraint_type

#Constrain EE to volume between current and target path
uint8 DEFAULT_VOL = 0
uint8 NO_VOL = 1
uint8 BOX = 2
uint8 SPHERE = 3
uint8 CYLINDER = 4
uint8 CONE = 5

uint8 volume_constraint_type

# Set planning time, if no time is set default planning time will be used
float64 allowed_planning_time

# Maximum number of retries for planning
uint8 max_retries

# Multipler used to increase planning after each unsuccessful attempt
float64 replanning_multiplier
# If planning time increases above this value, this value will be used
float64 max_planning_time

moveit_msgs/Constraints path_constraints

================================================================================
MSG: moveit_msgs/Constraints
# This message contains a list of motion planning constraints.
# All constraints must be satisfied for a goal to be considered valid

string name

JointConstraint[] joint_constraints

PositionConstraint[] position_constraints

OrientationConstraint[] orientation_constraints

VisibilityConstraint[] visibility_constraints

================================================================================
MSG: moveit_msgs/JointConstraint
# Constrain the position of a joint to be within a certain bound
string joint_name

# the bound to be achieved is [position - tolerance_below, position + tolerance_above]
float64 position
float64 tolerance_above
float64 tolerance_below

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/PositionConstraint
# This message contains the definition of a position constraint.

Header header

# The robot link this constraint refers to
string link_name

# The offset (in the link frame) for the target point on the link we are planning for
geometry_msgs/Vector3 target_point_offset

# The volume this constraint refers to
BoundingVolume constraint_region

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: moveit_msgs/BoundingVolume
# Define a volume in 3D

# A set of solid geometric primitives that make up the volume to define (as a union)
shape_msgs/SolidPrimitive[] primitives

# The poses at which the primitives are located
geometry_msgs/Pose[] primitive_poses

# In addition to primitives, meshes can be specified to add to the bounding volume (again, as union)
shape_msgs/Mesh[] meshes

# The poses at which the meshes are located
geometry_msgs/Pose[] mesh_poses

================================================================================
MSG: shape_msgs/SolidPrimitive
# Define box, sphere, cylinder, cone 
# All shapes are defined to have their bounding boxes centered around 0,0,0.

uint8 BOX=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 CONE=4

# The type of the shape
uint8 type


# The dimensions of the shape
float64[] dimensions

# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array

# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding
# sides of the box.
uint8 BOX_X=0
uint8 BOX_Y=1
uint8 BOX_Z=2


# For the SPHERE type, only one component is used, and it gives the radius of
# the sphere.
uint8 SPHERE_RADIUS=0


# For the CYLINDER and CONE types, the center line is oriented along
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component
# of dimensions gives the height of the cylinder (cone).  The
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the
# radius of the base of the cylinder (cone).  Cone and cylinder
# primitives are defined to be circular. The tip of the cone is
# pointing up, along +Z axis.

uint8 CYLINDER_HEIGHT=0
uint8 CYLINDER_RADIUS=1

uint8 CONE_HEIGHT=0
uint8 CONE_RADIUS=1

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: moveit_msgs/OrientationConstraint
# This message contains the definition of an orientation constraint.

Header header

# The desired orientation of the robot link specified as a quaternion
geometry_msgs/Quaternion orientation

# The robot link this constraint refers to
string link_name

# Tolerance on the three vector components of the orientation error (optional)
float64 absolute_x_axis_tolerance
float64 absolute_y_axis_tolerance
float64 absolute_z_axis_tolerance

# Defines how the orientation error is calculated
# The error is compared to the tolerance defined above
uint8 parameterization

# The different options for the orientation error parameterization
# - Intrinsic xyz Euler angles (default value)
uint8 XYZ_EULER_ANGLES=0
# - A rotation vector. This is similar to the angle-axis representation,
# but the magnitude of the vector represents the rotation angle.
uint8 ROTATION_VECTOR=1

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/VisibilityConstraint
# The constraint is useful to maintain visibility to a disc (the target) in a particular frame.
# This disc forms the base of a visibiliy cone whose tip is at the origin of the sensor.
# Maintaining visibility is done by ensuring the robot does not obstruct the visibility cone.
# Note:
# This constraint does NOT enforce minimum or maximum distances between the sensor
# and the target, nor does it enforce the target to be in the field of view of
# the sensor. A PositionConstraint can (and probably should) be used for such purposes.

# The radius of the disc that should be maintained visible
float64 target_radius

# The pose of the disc; as the robot moves, the pose of the disc may change as well
# This can be in the frame of a particular robot link, for example
geometry_msgs/PoseStamped target_pose

# From the sensor origin towards the target, the disc forms a visibility cone
# This cone is approximated using many sides. For example, when using 4 sides,
# that in fact makes the visibility region be a pyramid.
# This value should always be 3 or more.
int32 cone_sides

# The pose in which visibility is to be maintained.
# The frame id should represent the robot link to which the sensor is attached.
# It is assumed the sensor can look directly at the target, in any direction.
# This assumption is usually not true, but additional PositionConstraints
# can resolve this issue.
geometry_msgs/PoseStamped sensor_pose

# Even though the disc is maintained visible, the visibility cone can be very small
# because of the orientation of the disc with respect to the sensor. It is possible
# for example to view the disk almost from a side, in which case the visibility cone
# can end up having close to 0 volume. The view angle is defined to be the angle between
# the normal to the visibility disc and the direction vector from the sensor origin.
# The value below represents the minimum desired view angle. For a perfect view,
# this value will be 0 (the two vectors are exact opposites). For a completely obstructed view
# this value will be Pi/2 (the vectors are perpendicular). This value defined below
# is the maximum view angle to be maintained. This should be a value in the open interval
# (0, Pi/2). If 0 is set, the view angle is NOT enforced.
float64 max_view_angle

# This angle is used similarly to max_view_angle but limits the maximum angle
# between the sensor origin direction vector and the axis that connects the
# sensor origin to the target frame origin. The value is again in the range (0, Pi/2)
# and is NOT enforced if set to 0.
float64 max_range_angle

# The axis that is assumed to indicate the direction of view for the sensor
# X = 2, Y = 1, Z = 0
uint8 SENSOR_Z=0
uint8 SENSOR_Y=1
uint8 SENSOR_X=2
uint8 sensor_view_direction

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: cares_msgs/MetricExtractionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
# Arm Command Enumeration
uint8 RESET    = 0
uint8 CAPTURE  = 1
uint8 MEASURE  = 2

# Arm command
uint8 command

# Path to save data too
std_msgs/String file_path

================================================================================
MSG: cares_msgs/MappingActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
MappingResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: cares_msgs/MappingResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result definition
uint8 result

================================================================================
MSG: cares_msgs/MappingActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
MappingFeedback feedback

================================================================================
MSG: cares_msgs/MappingFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback

#Enumeration
uint8 INIT       = 0
uint8 SCANNING   = 1
uint8 EXTRACTING = 2
uint8 ACTUATING  = 3
uint8 STOPPING   = 4
#Task status
uint8 status

cares_msgs/ScanningFeedback[] scanning_feedback
cares_msgs/MetricExtractionFeedback[] metric_feedback

uint8 count
uint8 total


================================================================================
MSG: cares_msgs/ScanningFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback

#Enumeration
uint8 INIT       = 0
uint8 MARKER     = 1
uint8 CAPTURING  = 2
uint8 ERROR      = 3
#Task status
uint8 status

#Enumeration
uint8 MOVING  = 4
uint8 IDLE    = 5
uint8 arm_status


================================================================================
MSG: cares_msgs/MetricExtractionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback definition
#Enumeration
uint8 CAPTURING = 0
uint8 MEASURING = 1
#Task status
uint8 status

uint8 processed
uint8 queued

"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['cares_msgs/MappingActionGoal','cares_msgs/MappingActionResult','cares_msgs/MappingActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MappingAction, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = cares_msgs.msg.MappingActionGoal()
      if self.action_result is None:
        self.action_result = cares_msgs.msg.MappingActionResult()
      if self.action_feedback is None:
        self.action_feedback = cares_msgs.msg.MappingActionFeedback()
    else:
      self.action_goal = cares_msgs.msg.MappingActionGoal()
      self.action_result = cares_msgs.msg.MappingActionResult()
      self.action_feedback = cares_msgs.msg.MappingActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.command
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_goal.goal.world_link.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B3I().pack(_x.action_goal.goal.get_marker.data, _x.action_goal.goal.path_id, _x.action_goal.goal.init_pose.header.seq, _x.action_goal.goal.init_pose.header.stamp.secs, _x.action_goal.goal.init_pose.header.stamp.nsecs))
      _x = self.action_goal.goal.init_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_goal.goal.init_pose.pose.position.x, _x.action_goal.goal.init_pose.pose.position.y, _x.action_goal.goal.init_pose.pose.position.z, _x.action_goal.goal.init_pose.pose.orientation.x, _x.action_goal.goal.init_pose.pose.orientation.y, _x.action_goal.goal.init_pose.pose.orientation.z, _x.action_goal.goal.init_pose.pose.orientation.w, _x.action_goal.goal.rail_pose.header.seq, _x.action_goal.goal.rail_pose.header.stamp.secs, _x.action_goal.goal.rail_pose.header.stamp.nsecs))
      _x = self.action_goal.goal.rail_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d3I().pack(_x.action_goal.goal.rail_pose.point.x, _x.action_goal.goal.rail_pose.point.y, _x.action_goal.goal.rail_pose.point.z, _x.action_goal.goal.rail_marker_target.header.seq, _x.action_goal.goal.rail_marker_target.header.stamp.secs, _x.action_goal.goal.rail_marker_target.header.stamp.nsecs))
      _x = self.action_goal.goal.rail_marker_target.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.action_goal.goal.rail_marker_target.point.x, _x.action_goal.goal.rail_marker_target.point.y, _x.action_goal.goal.rail_marker_target.point.z))
      length = len(self.action_goal.goal.scanning_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.scanning_goals:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.command, _x.marker_type))
        _v1 = val1.pose
        _v2 = _v1.header
        _x = _v2.seq
        buff.write(_get_struct_I().pack(_x))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v4 = _v1.pose
        _v5 = _v4.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = _v4.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v7 = val1.rail_pose
        _v8 = _v7.header
        _x = _v8.seq
        buff.write(_get_struct_I().pack(_x))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v10 = _v7.point
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v11 = val1.rail_marker_target
        _v12 = _v11.header
        _x = _v12.seq
        buff.write(_get_struct_I().pack(_x))
        _v13 = _v12.stamp
        _x = _v13
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v12.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v14 = _v11.point
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = val1.planning_link
        _x = _v15.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v16 = val1.world_link
        _x = _v16.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v17 = val1.file_path
        _x = _v17.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v18 = val1.path_constraints
        _x = _v18
        buff.write(_get_struct_2BdB2d().pack(_x.orientation_constraint_type, _x.volume_constraint_type, _x.allowed_planning_time, _x.max_retries, _x.replanning_multiplier, _x.max_planning_time))
        _v19 = _v18.path_constraints
        _x = _v19.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v19.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v19.joint_constraints:
          _x = val4.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(_v19.position_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v19.position_constraints:
          _v20 = val4.header
          _x = _v20.seq
          buff.write(_get_struct_I().pack(_x))
          _v21 = _v20.stamp
          _x = _v21
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v20.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v22 = val4.target_point_offset
          _x = _v22
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v23 = val4.constraint_region
          length = len(_v23.primitives)
          buff.write(_struct_I.pack(length))
          for val6 in _v23.primitives:
            _x = val6.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val6.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.dimensions))
          length = len(_v23.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v23.primitive_poses:
            _v24 = val6.position
            _x = _v24
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v25 = val6.orientation
            _x = _v25
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v23.meshes)
          buff.write(_struct_I.pack(length))
          for val6 in _v23.meshes:
            length = len(val6.triangles)
            buff.write(_struct_I.pack(length))
            for val7 in val6.triangles:
              buff.write(_get_struct_3I().pack(*val7.vertex_indices))
            length = len(val6.vertices)
            buff.write(_struct_I.pack(length))
            for val7 in val6.vertices:
              _x = val7
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v23.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v23.mesh_poses:
            _v26 = val6.position
            _x = _v26
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v27 = val6.orientation
            _x = _v27
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.weight
          buff.write(_get_struct_d().pack(_x))
        length = len(_v19.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v19.orientation_constraints:
          _v28 = val4.header
          _x = _v28.seq
          buff.write(_get_struct_I().pack(_x))
          _v29 = _v28.stamp
          _x = _v29
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v28.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v30 = val4.orientation
          _x = _v30
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
        length = len(_v19.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v19.visibility_constraints:
          _x = val4.target_radius
          buff.write(_get_struct_d().pack(_x))
          _v31 = val4.target_pose
          _v32 = _v31.header
          _x = _v32.seq
          buff.write(_get_struct_I().pack(_x))
          _v33 = _v32.stamp
          _x = _v33
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v32.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v34 = _v31.pose
          _v35 = _v34.position
          _x = _v35
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v36 = _v34.orientation
          _x = _v36
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.cone_sides
          buff.write(_get_struct_i().pack(_x))
          _v37 = val4.sensor_pose
          _v38 = _v37.header
          _x = _v38.seq
          buff.write(_get_struct_I().pack(_x))
          _v39 = _v38.stamp
          _x = _v39
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v38.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v40 = _v37.pose
          _v41 = _v40.position
          _x = _v41
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v42 = _v40.orientation
          _x = _v42
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      _x = self.action_goal.goal.metric_goal.command
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_goal.goal.metric_goal.file_path.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2BdB2d().pack(_x.action_goal.goal.path_constraints.orientation_constraint_type, _x.action_goal.goal.path_constraints.volume_constraint_type, _x.action_goal.goal.path_constraints.allowed_planning_time, _x.action_goal.goal.path_constraints.max_retries, _x.action_goal.goal.path_constraints.replanning_multiplier, _x.action_goal.goal.path_constraints.max_planning_time))
      _x = self.action_goal.goal.path_constraints.path_constraints.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.path_constraints.path_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.path_constraints.path_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.action_goal.goal.path_constraints.path_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.path_constraints.path_constraints.position_constraints:
        _v43 = val1.header
        _x = _v43.seq
        buff.write(_get_struct_I().pack(_x))
        _v44 = _v43.stamp
        _x = _v44
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v43.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v45 = val1.target_point_offset
        _x = _v45
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v46 = val1.constraint_region
        length = len(_v46.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v46.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.dimensions))
        length = len(_v46.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v46.primitive_poses:
          _v47 = val3.position
          _x = _v47
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v48 = val3.orientation
          _x = _v48
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v46.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v46.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v46.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v46.mesh_poses:
          _v49 = val3.position
          _x = _v49
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v50 = val3.orientation
          _x = _v50
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      length = len(self.action_goal.goal.path_constraints.path_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.path_constraints.path_constraints.orientation_constraints:
        _v51 = val1.header
        _x = _v51.seq
        buff.write(_get_struct_I().pack(_x))
        _v52 = _v51.stamp
        _x = _v52
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v51.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v53 = val1.orientation
        _x = _v53
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
      length = len(self.action_goal.goal.path_constraints.path_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.path_constraints.path_constraints.visibility_constraints:
        _x = val1.target_radius
        buff.write(_get_struct_d().pack(_x))
        _v54 = val1.target_pose
        _v55 = _v54.header
        _x = _v55.seq
        buff.write(_get_struct_I().pack(_x))
        _v56 = _v55.stamp
        _x = _v56
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v55.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v57 = _v54.pose
        _v58 = _v57.position
        _x = _v58
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v59 = _v57.orientation
        _x = _v59
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.cone_sides
        buff.write(_get_struct_i().pack(_x))
        _v60 = val1.sensor_pose
        _v61 = _v60.header
        _x = _v61.seq
        buff.write(_get_struct_I().pack(_x))
        _v62 = _v61.stamp
        _x = _v62
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v61.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v63 = _v60.pose
        _v64 = _v63.position
        _x = _v64
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v65 = _v63.orientation
        _x = _v65
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.action_result.result.result, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.status
      buff.write(_get_struct_B().pack(_x))
      length = len(self.action_feedback.feedback.scanning_feedback)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.scanning_feedback:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.status, _x.arm_status))
      length = len(self.action_feedback.feedback.metric_feedback)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.metric_feedback:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.status, _x.processed, _x.queued))
      _x = self
      buff.write(_get_struct_2B().pack(_x.action_feedback.feedback.count, _x.action_feedback.feedback.total))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = cares_msgs.msg.MappingActionGoal()
      if self.action_result is None:
        self.action_result = cares_msgs.msg.MappingActionResult()
      if self.action_feedback is None:
        self.action_feedback = cares_msgs.msg.MappingActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_goal.goal.command,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.world_link.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.world_link.data = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.action_goal.goal.get_marker.data, _x.action_goal.goal.path_id, _x.action_goal.goal.init_pose.header.seq, _x.action_goal.goal.init_pose.header.stamp.secs, _x.action_goal.goal.init_pose.header.stamp.nsecs,) = _get_struct_2B3I().unpack(str[start:end])
      self.action_goal.goal.get_marker.data = bool(self.action_goal.goal.get_marker.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.init_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.init_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.init_pose.pose.position.x, _x.action_goal.goal.init_pose.pose.position.y, _x.action_goal.goal.init_pose.pose.position.z, _x.action_goal.goal.init_pose.pose.orientation.x, _x.action_goal.goal.init_pose.pose.orientation.y, _x.action_goal.goal.init_pose.pose.orientation.z, _x.action_goal.goal.init_pose.pose.orientation.w, _x.action_goal.goal.rail_pose.header.seq, _x.action_goal.goal.rail_pose.header.stamp.secs, _x.action_goal.goal.rail_pose.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.rail_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.rail_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.action_goal.goal.rail_pose.point.x, _x.action_goal.goal.rail_pose.point.y, _x.action_goal.goal.rail_pose.point.z, _x.action_goal.goal.rail_marker_target.header.seq, _x.action_goal.goal.rail_marker_target.header.stamp.secs, _x.action_goal.goal.rail_marker_target.header.stamp.nsecs,) = _get_struct_3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.rail_marker_target.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.rail_marker_target.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.action_goal.goal.rail_marker_target.point.x, _x.action_goal.goal.rail_marker_target.point.y, _x.action_goal.goal.rail_marker_target.point.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.scanning_goals = []
      for i in range(0, length):
        val1 = cares_msgs.msg.ScanningGoal()
        _x = val1
        start = end
        end += 2
        (_x.command, _x.marker_type,) = _get_struct_2B().unpack(str[start:end])
        _v66 = val1.pose
        _v67 = _v66.header
        start = end
        end += 4
        (_v67.seq,) = _get_struct_I().unpack(str[start:end])
        _v68 = _v67.stamp
        _x = _v68
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v67.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v67.frame_id = str[start:end]
        _v69 = _v66.pose
        _v70 = _v69.position
        _x = _v70
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v71 = _v69.orientation
        _x = _v71
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v72 = val1.rail_pose
        _v73 = _v72.header
        start = end
        end += 4
        (_v73.seq,) = _get_struct_I().unpack(str[start:end])
        _v74 = _v73.stamp
        _x = _v74
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v73.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v73.frame_id = str[start:end]
        _v75 = _v72.point
        _x = _v75
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v76 = val1.rail_marker_target
        _v77 = _v76.header
        start = end
        end += 4
        (_v77.seq,) = _get_struct_I().unpack(str[start:end])
        _v78 = _v77.stamp
        _x = _v78
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v77.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v77.frame_id = str[start:end]
        _v79 = _v76.point
        _x = _v79
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v80 = val1.planning_link
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v80.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v80.data = str[start:end]
        _v81 = val1.world_link
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v81.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v81.data = str[start:end]
        _v82 = val1.file_path
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v82.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v82.data = str[start:end]
        _v83 = val1.path_constraints
        _x = _v83
        start = end
        end += 27
        (_x.orientation_constraint_type, _x.volume_constraint_type, _x.allowed_planning_time, _x.max_retries, _x.replanning_multiplier, _x.max_planning_time,) = _get_struct_2BdB2d().unpack(str[start:end])
        _v84 = _v83.path_constraints
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v84.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v84.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v84.joint_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.joint_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.joint_name = str[start:end]
          _x = val4
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          _v84.joint_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v84.position_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.PositionConstraint()
          _v85 = val4.header
          start = end
          end += 4
          (_v85.seq,) = _get_struct_I().unpack(str[start:end])
          _v86 = _v85.stamp
          _x = _v86
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v85.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v85.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _v87 = val4.target_point_offset
          _x = _v87
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v88 = val4.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v88.primitives = []
          for i in range(0, length):
            val6 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val6.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.dimensions = s.unpack(str[start:end])
            _v88.primitives.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v88.primitive_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v89 = val6.position
            _x = _v89
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v90 = val6.orientation
            _x = _v90
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v88.primitive_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v88.meshes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.triangles = []
            for i in range(0, length):
              val7 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val7.vertex_indices = _get_struct_3I().unpack(str[start:end])
              val6.triangles.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.vertices = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Point()
              _x = val7
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val6.vertices.append(val7)
            _v88.meshes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v88.mesh_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v91 = val6.position
            _x = _v91
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v92 = val6.orientation
            _x = _v92
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v88.mesh_poses.append(val6)
          start = end
          end += 8
          (val4.weight,) = _get_struct_d().unpack(str[start:end])
          _v84.position_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v84.orientation_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.OrientationConstraint()
          _v93 = val4.header
          start = end
          end += 4
          (_v93.seq,) = _get_struct_I().unpack(str[start:end])
          _v94 = _v93.stamp
          _x = _v94
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v93.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v93.frame_id = str[start:end]
          _v95 = val4.orientation
          _x = _v95
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _x = val4
          start = end
          end += 33
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
          _v84.orientation_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v84.visibility_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val4.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v96 = val4.target_pose
          _v97 = _v96.header
          start = end
          end += 4
          (_v97.seq,) = _get_struct_I().unpack(str[start:end])
          _v98 = _v97.stamp
          _x = _v98
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v97.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v97.frame_id = str[start:end]
          _v99 = _v96.pose
          _v100 = _v99.position
          _x = _v100
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v101 = _v99.orientation
          _x = _v101
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val4.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v102 = val4.sensor_pose
          _v103 = _v102.header
          start = end
          end += 4
          (_v103.seq,) = _get_struct_I().unpack(str[start:end])
          _v104 = _v103.stamp
          _x = _v104
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v103.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v103.frame_id = str[start:end]
          _v105 = _v102.pose
          _v106 = _v105.position
          _x = _v106
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v107 = _v105.orientation
          _x = _v107
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val4
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          _v84.visibility_constraints.append(val4)
        self.action_goal.goal.scanning_goals.append(val1)
      start = end
      end += 1
      (self.action_goal.goal.metric_goal.command,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.metric_goal.file_path.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.metric_goal.file_path.data = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.action_goal.goal.path_constraints.orientation_constraint_type, _x.action_goal.goal.path_constraints.volume_constraint_type, _x.action_goal.goal.path_constraints.allowed_planning_time, _x.action_goal.goal.path_constraints.max_retries, _x.action_goal.goal.path_constraints.replanning_multiplier, _x.action_goal.goal.path_constraints.max_planning_time,) = _get_struct_2BdB2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.path_constraints.path_constraints.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.path_constraints.path_constraints.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.path_constraints.path_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.path_constraints.path_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.path_constraints.path_constraints.position_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.PositionConstraint()
        _v108 = val1.header
        start = end
        end += 4
        (_v108.seq,) = _get_struct_I().unpack(str[start:end])
        _v109 = _v108.stamp
        _x = _v109
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v108.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v108.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v110 = val1.target_point_offset
        _x = _v110
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v111 = val1.constraint_region
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v111.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = s.unpack(str[start:end])
          _v111.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v111.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v112 = val3.position
          _x = _v112
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v113 = val3.orientation
          _x = _v113
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v111.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v111.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v111.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v111.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v114 = val3.position
          _x = _v114
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v115 = val3.orientation
          _x = _v115
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v111.mesh_poses.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.path_constraints.path_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.path_constraints.path_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.OrientationConstraint()
        _v116 = val1.header
        start = end
        end += 4
        (_v116.seq,) = _get_struct_I().unpack(str[start:end])
        _v117 = _v116.stamp
        _x = _v117
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v116.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v116.frame_id = str[start:end]
        _v118 = val1.orientation
        _x = _v118
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _x = val1
        start = end
        end += 33
        (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
        self.action_goal.goal.path_constraints.path_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.path_constraints.path_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.VisibilityConstraint()
        start = end
        end += 8
        (val1.target_radius,) = _get_struct_d().unpack(str[start:end])
        _v119 = val1.target_pose
        _v120 = _v119.header
        start = end
        end += 4
        (_v120.seq,) = _get_struct_I().unpack(str[start:end])
        _v121 = _v120.stamp
        _x = _v121
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v120.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v120.frame_id = str[start:end]
        _v122 = _v119.pose
        _v123 = _v122.position
        _x = _v123
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v124 = _v122.orientation
        _x = _v124
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (val1.cone_sides,) = _get_struct_i().unpack(str[start:end])
        _v125 = val1.sensor_pose
        _v126 = _v125.header
        start = end
        end += 4
        (_v126.seq,) = _get_struct_I().unpack(str[start:end])
        _v127 = _v126.stamp
        _x = _v127
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v126.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v126.frame_id = str[start:end]
        _v128 = _v125.pose
        _v129 = _v128.position
        _x = _v129
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v130 = _v128.orientation
        _x = _v130
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 25
        (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
        self.action_goal.goal.path_constraints.path_constraints.visibility_constraints.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.action_result.result.result, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 1
      (self.action_feedback.feedback.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.scanning_feedback = []
      for i in range(0, length):
        val1 = cares_msgs.msg.ScanningFeedback()
        _x = val1
        start = end
        end += 2
        (_x.status, _x.arm_status,) = _get_struct_2B().unpack(str[start:end])
        self.action_feedback.feedback.scanning_feedback.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.metric_feedback = []
      for i in range(0, length):
        val1 = cares_msgs.msg.MetricExtractionFeedback()
        _x = val1
        start = end
        end += 3
        (_x.status, _x.processed, _x.queued,) = _get_struct_3B().unpack(str[start:end])
        self.action_feedback.feedback.metric_feedback.append(val1)
      _x = self
      start = end
      end += 2
      (_x.action_feedback.feedback.count, _x.action_feedback.feedback.total,) = _get_struct_2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.command
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_goal.goal.world_link.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B3I().pack(_x.action_goal.goal.get_marker.data, _x.action_goal.goal.path_id, _x.action_goal.goal.init_pose.header.seq, _x.action_goal.goal.init_pose.header.stamp.secs, _x.action_goal.goal.init_pose.header.stamp.nsecs))
      _x = self.action_goal.goal.init_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_goal.goal.init_pose.pose.position.x, _x.action_goal.goal.init_pose.pose.position.y, _x.action_goal.goal.init_pose.pose.position.z, _x.action_goal.goal.init_pose.pose.orientation.x, _x.action_goal.goal.init_pose.pose.orientation.y, _x.action_goal.goal.init_pose.pose.orientation.z, _x.action_goal.goal.init_pose.pose.orientation.w, _x.action_goal.goal.rail_pose.header.seq, _x.action_goal.goal.rail_pose.header.stamp.secs, _x.action_goal.goal.rail_pose.header.stamp.nsecs))
      _x = self.action_goal.goal.rail_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d3I().pack(_x.action_goal.goal.rail_pose.point.x, _x.action_goal.goal.rail_pose.point.y, _x.action_goal.goal.rail_pose.point.z, _x.action_goal.goal.rail_marker_target.header.seq, _x.action_goal.goal.rail_marker_target.header.stamp.secs, _x.action_goal.goal.rail_marker_target.header.stamp.nsecs))
      _x = self.action_goal.goal.rail_marker_target.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.action_goal.goal.rail_marker_target.point.x, _x.action_goal.goal.rail_marker_target.point.y, _x.action_goal.goal.rail_marker_target.point.z))
      length = len(self.action_goal.goal.scanning_goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.scanning_goals:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.command, _x.marker_type))
        _v131 = val1.pose
        _v132 = _v131.header
        _x = _v132.seq
        buff.write(_get_struct_I().pack(_x))
        _v133 = _v132.stamp
        _x = _v133
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v132.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v134 = _v131.pose
        _v135 = _v134.position
        _x = _v135
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v136 = _v134.orientation
        _x = _v136
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v137 = val1.rail_pose
        _v138 = _v137.header
        _x = _v138.seq
        buff.write(_get_struct_I().pack(_x))
        _v139 = _v138.stamp
        _x = _v139
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v138.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v140 = _v137.point
        _x = _v140
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v141 = val1.rail_marker_target
        _v142 = _v141.header
        _x = _v142.seq
        buff.write(_get_struct_I().pack(_x))
        _v143 = _v142.stamp
        _x = _v143
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v142.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v144 = _v141.point
        _x = _v144
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v145 = val1.planning_link
        _x = _v145.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v146 = val1.world_link
        _x = _v146.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v147 = val1.file_path
        _x = _v147.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v148 = val1.path_constraints
        _x = _v148
        buff.write(_get_struct_2BdB2d().pack(_x.orientation_constraint_type, _x.volume_constraint_type, _x.allowed_planning_time, _x.max_retries, _x.replanning_multiplier, _x.max_planning_time))
        _v149 = _v148.path_constraints
        _x = _v149.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v149.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v149.joint_constraints:
          _x = val4.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(_v149.position_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v149.position_constraints:
          _v150 = val4.header
          _x = _v150.seq
          buff.write(_get_struct_I().pack(_x))
          _v151 = _v150.stamp
          _x = _v151
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v150.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v152 = val4.target_point_offset
          _x = _v152
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v153 = val4.constraint_region
          length = len(_v153.primitives)
          buff.write(_struct_I.pack(length))
          for val6 in _v153.primitives:
            _x = val6.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val6.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.dimensions.tostring())
          length = len(_v153.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v153.primitive_poses:
            _v154 = val6.position
            _x = _v154
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v155 = val6.orientation
            _x = _v155
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v153.meshes)
          buff.write(_struct_I.pack(length))
          for val6 in _v153.meshes:
            length = len(val6.triangles)
            buff.write(_struct_I.pack(length))
            for val7 in val6.triangles:
              buff.write(val7.vertex_indices.tostring())
            length = len(val6.vertices)
            buff.write(_struct_I.pack(length))
            for val7 in val6.vertices:
              _x = val7
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v153.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v153.mesh_poses:
            _v156 = val6.position
            _x = _v156
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v157 = val6.orientation
            _x = _v157
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.weight
          buff.write(_get_struct_d().pack(_x))
        length = len(_v149.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v149.orientation_constraints:
          _v158 = val4.header
          _x = _v158.seq
          buff.write(_get_struct_I().pack(_x))
          _v159 = _v158.stamp
          _x = _v159
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v158.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v160 = val4.orientation
          _x = _v160
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
        length = len(_v149.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v149.visibility_constraints:
          _x = val4.target_radius
          buff.write(_get_struct_d().pack(_x))
          _v161 = val4.target_pose
          _v162 = _v161.header
          _x = _v162.seq
          buff.write(_get_struct_I().pack(_x))
          _v163 = _v162.stamp
          _x = _v163
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v162.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v164 = _v161.pose
          _v165 = _v164.position
          _x = _v165
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v166 = _v164.orientation
          _x = _v166
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.cone_sides
          buff.write(_get_struct_i().pack(_x))
          _v167 = val4.sensor_pose
          _v168 = _v167.header
          _x = _v168.seq
          buff.write(_get_struct_I().pack(_x))
          _v169 = _v168.stamp
          _x = _v169
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v168.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v170 = _v167.pose
          _v171 = _v170.position
          _x = _v171
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v172 = _v170.orientation
          _x = _v172
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      _x = self.action_goal.goal.metric_goal.command
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_goal.goal.metric_goal.file_path.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2BdB2d().pack(_x.action_goal.goal.path_constraints.orientation_constraint_type, _x.action_goal.goal.path_constraints.volume_constraint_type, _x.action_goal.goal.path_constraints.allowed_planning_time, _x.action_goal.goal.path_constraints.max_retries, _x.action_goal.goal.path_constraints.replanning_multiplier, _x.action_goal.goal.path_constraints.max_planning_time))
      _x = self.action_goal.goal.path_constraints.path_constraints.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.path_constraints.path_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.path_constraints.path_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.action_goal.goal.path_constraints.path_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.path_constraints.path_constraints.position_constraints:
        _v173 = val1.header
        _x = _v173.seq
        buff.write(_get_struct_I().pack(_x))
        _v174 = _v173.stamp
        _x = _v174
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v173.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v175 = val1.target_point_offset
        _x = _v175
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v176 = val1.constraint_region
        length = len(_v176.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v176.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v176.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v176.primitive_poses:
          _v177 = val3.position
          _x = _v177
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v178 = val3.orientation
          _x = _v178
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v176.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v176.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v176.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v176.mesh_poses:
          _v179 = val3.position
          _x = _v179
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v180 = val3.orientation
          _x = _v180
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      length = len(self.action_goal.goal.path_constraints.path_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.path_constraints.path_constraints.orientation_constraints:
        _v181 = val1.header
        _x = _v181.seq
        buff.write(_get_struct_I().pack(_x))
        _v182 = _v181.stamp
        _x = _v182
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v181.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v183 = val1.orientation
        _x = _v183
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3dBd().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight))
      length = len(self.action_goal.goal.path_constraints.path_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.path_constraints.path_constraints.visibility_constraints:
        _x = val1.target_radius
        buff.write(_get_struct_d().pack(_x))
        _v184 = val1.target_pose
        _v185 = _v184.header
        _x = _v185.seq
        buff.write(_get_struct_I().pack(_x))
        _v186 = _v185.stamp
        _x = _v186
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v185.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v187 = _v184.pose
        _v188 = _v187.position
        _x = _v188
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v189 = _v187.orientation
        _x = _v189
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.cone_sides
        buff.write(_get_struct_i().pack(_x))
        _v190 = val1.sensor_pose
        _v191 = _v190.header
        _x = _v191.seq
        buff.write(_get_struct_I().pack(_x))
        _v192 = _v191.stamp
        _x = _v192
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v191.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v193 = _v190.pose
        _v194 = _v193.position
        _x = _v194
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v195 = _v193.orientation
        _x = _v195
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.action_result.result.result, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.status
      buff.write(_get_struct_B().pack(_x))
      length = len(self.action_feedback.feedback.scanning_feedback)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.scanning_feedback:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.status, _x.arm_status))
      length = len(self.action_feedback.feedback.metric_feedback)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.metric_feedback:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.status, _x.processed, _x.queued))
      _x = self
      buff.write(_get_struct_2B().pack(_x.action_feedback.feedback.count, _x.action_feedback.feedback.total))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = cares_msgs.msg.MappingActionGoal()
      if self.action_result is None:
        self.action_result = cares_msgs.msg.MappingActionResult()
      if self.action_feedback is None:
        self.action_feedback = cares_msgs.msg.MappingActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_goal.goal.command,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.world_link.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.world_link.data = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.action_goal.goal.get_marker.data, _x.action_goal.goal.path_id, _x.action_goal.goal.init_pose.header.seq, _x.action_goal.goal.init_pose.header.stamp.secs, _x.action_goal.goal.init_pose.header.stamp.nsecs,) = _get_struct_2B3I().unpack(str[start:end])
      self.action_goal.goal.get_marker.data = bool(self.action_goal.goal.get_marker.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.init_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.init_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.init_pose.pose.position.x, _x.action_goal.goal.init_pose.pose.position.y, _x.action_goal.goal.init_pose.pose.position.z, _x.action_goal.goal.init_pose.pose.orientation.x, _x.action_goal.goal.init_pose.pose.orientation.y, _x.action_goal.goal.init_pose.pose.orientation.z, _x.action_goal.goal.init_pose.pose.orientation.w, _x.action_goal.goal.rail_pose.header.seq, _x.action_goal.goal.rail_pose.header.stamp.secs, _x.action_goal.goal.rail_pose.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.rail_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.rail_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.action_goal.goal.rail_pose.point.x, _x.action_goal.goal.rail_pose.point.y, _x.action_goal.goal.rail_pose.point.z, _x.action_goal.goal.rail_marker_target.header.seq, _x.action_goal.goal.rail_marker_target.header.stamp.secs, _x.action_goal.goal.rail_marker_target.header.stamp.nsecs,) = _get_struct_3d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.rail_marker_target.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.rail_marker_target.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.action_goal.goal.rail_marker_target.point.x, _x.action_goal.goal.rail_marker_target.point.y, _x.action_goal.goal.rail_marker_target.point.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.scanning_goals = []
      for i in range(0, length):
        val1 = cares_msgs.msg.ScanningGoal()
        _x = val1
        start = end
        end += 2
        (_x.command, _x.marker_type,) = _get_struct_2B().unpack(str[start:end])
        _v196 = val1.pose
        _v197 = _v196.header
        start = end
        end += 4
        (_v197.seq,) = _get_struct_I().unpack(str[start:end])
        _v198 = _v197.stamp
        _x = _v198
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v197.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v197.frame_id = str[start:end]
        _v199 = _v196.pose
        _v200 = _v199.position
        _x = _v200
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v201 = _v199.orientation
        _x = _v201
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v202 = val1.rail_pose
        _v203 = _v202.header
        start = end
        end += 4
        (_v203.seq,) = _get_struct_I().unpack(str[start:end])
        _v204 = _v203.stamp
        _x = _v204
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v203.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v203.frame_id = str[start:end]
        _v205 = _v202.point
        _x = _v205
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v206 = val1.rail_marker_target
        _v207 = _v206.header
        start = end
        end += 4
        (_v207.seq,) = _get_struct_I().unpack(str[start:end])
        _v208 = _v207.stamp
        _x = _v208
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v207.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v207.frame_id = str[start:end]
        _v209 = _v206.point
        _x = _v209
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v210 = val1.planning_link
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v210.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v210.data = str[start:end]
        _v211 = val1.world_link
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v211.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v211.data = str[start:end]
        _v212 = val1.file_path
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v212.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v212.data = str[start:end]
        _v213 = val1.path_constraints
        _x = _v213
        start = end
        end += 27
        (_x.orientation_constraint_type, _x.volume_constraint_type, _x.allowed_planning_time, _x.max_retries, _x.replanning_multiplier, _x.max_planning_time,) = _get_struct_2BdB2d().unpack(str[start:end])
        _v214 = _v213.path_constraints
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v214.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v214.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v214.joint_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.joint_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.joint_name = str[start:end]
          _x = val4
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          _v214.joint_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v214.position_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.PositionConstraint()
          _v215 = val4.header
          start = end
          end += 4
          (_v215.seq,) = _get_struct_I().unpack(str[start:end])
          _v216 = _v215.stamp
          _x = _v216
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v215.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v215.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _v217 = val4.target_point_offset
          _x = _v217
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v218 = val4.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v218.primitives = []
          for i in range(0, length):
            val6 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val6.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v218.primitives.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v218.primitive_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v219 = val6.position
            _x = _v219
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v220 = val6.orientation
            _x = _v220
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v218.primitive_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v218.meshes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.triangles = []
            for i in range(0, length):
              val7 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val7.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val6.triangles.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.vertices = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Point()
              _x = val7
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val6.vertices.append(val7)
            _v218.meshes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v218.mesh_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v221 = val6.position
            _x = _v221
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v222 = val6.orientation
            _x = _v222
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v218.mesh_poses.append(val6)
          start = end
          end += 8
          (val4.weight,) = _get_struct_d().unpack(str[start:end])
          _v214.position_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v214.orientation_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.OrientationConstraint()
          _v223 = val4.header
          start = end
          end += 4
          (_v223.seq,) = _get_struct_I().unpack(str[start:end])
          _v224 = _v223.stamp
          _x = _v224
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v223.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v223.frame_id = str[start:end]
          _v225 = val4.orientation
          _x = _v225
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _x = val4
          start = end
          end += 33
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
          _v214.orientation_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v214.visibility_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val4.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v226 = val4.target_pose
          _v227 = _v226.header
          start = end
          end += 4
          (_v227.seq,) = _get_struct_I().unpack(str[start:end])
          _v228 = _v227.stamp
          _x = _v228
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v227.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v227.frame_id = str[start:end]
          _v229 = _v226.pose
          _v230 = _v229.position
          _x = _v230
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v231 = _v229.orientation
          _x = _v231
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val4.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v232 = val4.sensor_pose
          _v233 = _v232.header
          start = end
          end += 4
          (_v233.seq,) = _get_struct_I().unpack(str[start:end])
          _v234 = _v233.stamp
          _x = _v234
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v233.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v233.frame_id = str[start:end]
          _v235 = _v232.pose
          _v236 = _v235.position
          _x = _v236
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v237 = _v235.orientation
          _x = _v237
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val4
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          _v214.visibility_constraints.append(val4)
        self.action_goal.goal.scanning_goals.append(val1)
      start = end
      end += 1
      (self.action_goal.goal.metric_goal.command,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.metric_goal.file_path.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.metric_goal.file_path.data = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.action_goal.goal.path_constraints.orientation_constraint_type, _x.action_goal.goal.path_constraints.volume_constraint_type, _x.action_goal.goal.path_constraints.allowed_planning_time, _x.action_goal.goal.path_constraints.max_retries, _x.action_goal.goal.path_constraints.replanning_multiplier, _x.action_goal.goal.path_constraints.max_planning_time,) = _get_struct_2BdB2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.path_constraints.path_constraints.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.path_constraints.path_constraints.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.path_constraints.path_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.path_constraints.path_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.path_constraints.path_constraints.position_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.PositionConstraint()
        _v238 = val1.header
        start = end
        end += 4
        (_v238.seq,) = _get_struct_I().unpack(str[start:end])
        _v239 = _v238.stamp
        _x = _v239
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v238.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v238.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v240 = val1.target_point_offset
        _x = _v240
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v241 = val1.constraint_region
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v241.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v241.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v241.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v242 = val3.position
          _x = _v242
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v243 = val3.orientation
          _x = _v243
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v241.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v241.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v241.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v241.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v244 = val3.position
          _x = _v244
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v245 = val3.orientation
          _x = _v245
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v241.mesh_poses.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.path_constraints.path_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.path_constraints.path_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.OrientationConstraint()
        _v246 = val1.header
        start = end
        end += 4
        (_v246.seq,) = _get_struct_I().unpack(str[start:end])
        _v247 = _v246.stamp
        _x = _v247
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v246.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v246.frame_id = str[start:end]
        _v248 = val1.orientation
        _x = _v248
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _x = val1
        start = end
        end += 33
        (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.parameterization, _x.weight,) = _get_struct_3dBd().unpack(str[start:end])
        self.action_goal.goal.path_constraints.path_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.path_constraints.path_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.VisibilityConstraint()
        start = end
        end += 8
        (val1.target_radius,) = _get_struct_d().unpack(str[start:end])
        _v249 = val1.target_pose
        _v250 = _v249.header
        start = end
        end += 4
        (_v250.seq,) = _get_struct_I().unpack(str[start:end])
        _v251 = _v250.stamp
        _x = _v251
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v250.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v250.frame_id = str[start:end]
        _v252 = _v249.pose
        _v253 = _v252.position
        _x = _v253
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v254 = _v252.orientation
        _x = _v254
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (val1.cone_sides,) = _get_struct_i().unpack(str[start:end])
        _v255 = val1.sensor_pose
        _v256 = _v255.header
        start = end
        end += 4
        (_v256.seq,) = _get_struct_I().unpack(str[start:end])
        _v257 = _v256.stamp
        _x = _v257
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v256.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v256.frame_id = str[start:end]
        _v258 = _v255.pose
        _v259 = _v258.position
        _x = _v259
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v260 = _v258.orientation
        _x = _v260
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 25
        (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
        self.action_goal.goal.path_constraints.path_constraints.visibility_constraints.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.action_result.result.result, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 1
      (self.action_feedback.feedback.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.scanning_feedback = []
      for i in range(0, length):
        val1 = cares_msgs.msg.ScanningFeedback()
        _x = val1
        start = end
        end += 2
        (_x.status, _x.arm_status,) = _get_struct_2B().unpack(str[start:end])
        self.action_feedback.feedback.scanning_feedback.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.metric_feedback = []
      for i in range(0, length):
        val1 = cares_msgs.msg.MetricExtractionFeedback()
        _x = val1
        start = end
        end += 3
        (_x.status, _x.processed, _x.queued,) = _get_struct_3B().unpack(str[start:end])
        self.action_feedback.feedback.metric_feedback.append(val1)
      _x = self
      start = end
      end += 2
      (_x.action_feedback.feedback.count, _x.action_feedback.feedback.total,) = _get_struct_2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2B3I = None
def _get_struct_2B3I():
    global _struct_2B3I
    if _struct_2B3I is None:
        _struct_2B3I = struct.Struct("<2B3I")
    return _struct_2B3I
_struct_2BdB2d = None
def _get_struct_2BdB2d():
    global _struct_2BdB2d
    if _struct_2BdB2d is None:
        _struct_2BdB2d = struct.Struct("<2BdB2d")
    return _struct_2BdB2d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2dBd = None
def _get_struct_2dBd():
    global _struct_2dBd
    if _struct_2dBd is None:
        _struct_2dBd = struct.Struct("<2dBd")
    return _struct_2dBd
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3d3I = None
def _get_struct_3d3I():
    global _struct_3d3I
    if _struct_3d3I is None:
        _struct_3d3I = struct.Struct("<3d3I")
    return _struct_3d3I
_struct_3dBd = None
def _get_struct_3dBd():
    global _struct_3dBd
    if _struct_3dBd is None:
        _struct_3dBd = struct.Struct("<3dBd")
    return _struct_3dBd
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

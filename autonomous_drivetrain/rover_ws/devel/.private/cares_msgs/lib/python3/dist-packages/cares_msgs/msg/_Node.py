# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cares_msgs/Node.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cares_msgs.msg
import geometry_msgs.msg

class Node(genpy.Message):
  _md5sum = "e9d632a96747680a83b13f1ba6df5723"
  _type = "cares_msgs/Node"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 node_id

#Node Type
uint8  PRIMARY_ORIGIN_NODE = 0
uint8  REGULAR_NODE = 1
uint8  MULTI_NODE = 2
uint8  UNLINKED_NODE = 3
uint8  node_type

geometry_msgs/Point position

uint32 sequencial_neighbour_id
cares_msgs/NodeNeighbourInfo[] neighbours


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: cares_msgs/NodeNeighbourInfo
uint32 neighbour_id
float64 internode_length
float64 internode_width"""
  # Pseudo-constants
  PRIMARY_ORIGIN_NODE = 0
  REGULAR_NODE = 1
  MULTI_NODE = 2
  UNLINKED_NODE = 3

  __slots__ = ['node_id','node_type','position','sequencial_neighbour_id','neighbours']
  _slot_types = ['uint32','uint8','geometry_msgs/Point','uint32','cares_msgs/NodeNeighbourInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       node_id,node_type,position,sequencial_neighbour_id,neighbours

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Node, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.node_id is None:
        self.node_id = 0
      if self.node_type is None:
        self.node_type = 0
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.sequencial_neighbour_id is None:
        self.sequencial_neighbour_id = 0
      if self.neighbours is None:
        self.neighbours = []
    else:
      self.node_id = 0
      self.node_type = 0
      self.position = geometry_msgs.msg.Point()
      self.sequencial_neighbour_id = 0
      self.neighbours = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_IB3dI().pack(_x.node_id, _x.node_type, _x.position.x, _x.position.y, _x.position.z, _x.sequencial_neighbour_id))
      length = len(self.neighbours)
      buff.write(_struct_I.pack(length))
      for val1 in self.neighbours:
        _x = val1
        buff.write(_get_struct_I2d().pack(_x.neighbour_id, _x.internode_length, _x.internode_width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.neighbours is None:
        self.neighbours = None
      end = 0
      _x = self
      start = end
      end += 33
      (_x.node_id, _x.node_type, _x.position.x, _x.position.y, _x.position.z, _x.sequencial_neighbour_id,) = _get_struct_IB3dI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.neighbours = []
      for i in range(0, length):
        val1 = cares_msgs.msg.NodeNeighbourInfo()
        _x = val1
        start = end
        end += 20
        (_x.neighbour_id, _x.internode_length, _x.internode_width,) = _get_struct_I2d().unpack(str[start:end])
        self.neighbours.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_IB3dI().pack(_x.node_id, _x.node_type, _x.position.x, _x.position.y, _x.position.z, _x.sequencial_neighbour_id))
      length = len(self.neighbours)
      buff.write(_struct_I.pack(length))
      for val1 in self.neighbours:
        _x = val1
        buff.write(_get_struct_I2d().pack(_x.neighbour_id, _x.internode_length, _x.internode_width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.neighbours is None:
        self.neighbours = None
      end = 0
      _x = self
      start = end
      end += 33
      (_x.node_id, _x.node_type, _x.position.x, _x.position.y, _x.position.z, _x.sequencial_neighbour_id,) = _get_struct_IB3dI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.neighbours = []
      for i in range(0, length):
        val1 = cares_msgs.msg.NodeNeighbourInfo()
        _x = val1
        start = end
        end += 20
        (_x.neighbour_id, _x.internode_length, _x.internode_width,) = _get_struct_I2d().unpack(str[start:end])
        self.neighbours.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I2d = None
def _get_struct_I2d():
    global _struct_I2d
    if _struct_I2d is None:
        _struct_I2d = struct.Struct("<I2d")
    return _struct_I2d
_struct_IB3dI = None
def _get_struct_IB3dI():
    global _struct_IB3dI
    if _struct_IB3dI is None:
        _struct_IB3dI = struct.Struct("<IB3dI")
    return _struct_IB3dI

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cares_msgs/MergeExtractorRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cares_msgs.msg
import geometry_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class MergeExtractorRequest(genpy.Message):
  _md5sum = "ce2bddf3551f494002695cf7639c69de"
  _type = "cares_msgs/MergeExtractorRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """cares_msgs/MetricExtractionResult extractor_result

================================================================================
MSG: cares_msgs/MetricExtractionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result definition
uint8 result
cares_msgs/Vine vine
cares_msgs/Fruitlets fruitlets
sensor_msgs/PointCloud2 point_cloud

================================================================================
MSG: cares_msgs/Vine
cares_msgs/Cane[] cane_list
================================================================================
MSG: cares_msgs/Cane
uint8 cane_id
uint8 cane_type

float64 internode_length
float64 internode_width
uint8 node_count

cares_msgs/Node[] node_list
cares_msgs/Node origin_node

================================================================================
MSG: cares_msgs/Node
uint32 node_id

#Node Type
uint8  PRIMARY_ORIGIN_NODE = 0
uint8  REGULAR_NODE = 1
uint8  MULTI_NODE = 2
uint8  UNLINKED_NODE = 3
uint8  node_type

geometry_msgs/Point position

uint32 sequencial_neighbour_id
cares_msgs/NodeNeighbourInfo[] neighbours


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: cares_msgs/NodeNeighbourInfo
uint32 neighbour_id
float64 internode_length
float64 internode_width
================================================================================
MSG: cares_msgs/Fruitlets
cares_msgs/Fruitlet[] fruitlets 

================================================================================
MSG: cares_msgs/Fruitlet
uint8 ID
geometry_msgs/Point centroid
geometry_msgs/Point calyx 
float32 radius
bool chosen_one

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field
"""
  __slots__ = ['extractor_result']
  _slot_types = ['cares_msgs/MetricExtractionResult']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       extractor_result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MergeExtractorRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.extractor_result is None:
        self.extractor_result = cares_msgs.msg.MetricExtractionResult()
    else:
      self.extractor_result = cares_msgs.msg.MetricExtractionResult()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.extractor_result.result
      buff.write(_get_struct_B().pack(_x))
      length = len(self.extractor_result.vine.cane_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.extractor_result.vine.cane_list:
        _x = val1
        buff.write(_get_struct_2B2dB().pack(_x.cane_id, _x.cane_type, _x.internode_length, _x.internode_width, _x.node_count))
        length = len(val1.node_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.node_list:
          _x = val2
          buff.write(_get_struct_IB().pack(_x.node_id, _x.node_type))
          _v1 = val2.position
          _x = _v1
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2.sequencial_neighbour_id
          buff.write(_get_struct_I().pack(_x))
          length = len(val2.neighbours)
          buff.write(_struct_I.pack(length))
          for val3 in val2.neighbours:
            _x = val3
            buff.write(_get_struct_I2d().pack(_x.neighbour_id, _x.internode_length, _x.internode_width))
        _v2 = val1.origin_node
        _x = _v2
        buff.write(_get_struct_IB().pack(_x.node_id, _x.node_type))
        _v3 = _v2.position
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v2.sequencial_neighbour_id
        buff.write(_get_struct_I().pack(_x))
        length = len(_v2.neighbours)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.neighbours:
          _x = val3
          buff.write(_get_struct_I2d().pack(_x.neighbour_id, _x.internode_length, _x.internode_width))
      length = len(self.extractor_result.fruitlets.fruitlets)
      buff.write(_struct_I.pack(length))
      for val1 in self.extractor_result.fruitlets.fruitlets:
        _x = val1.ID
        buff.write(_get_struct_B().pack(_x))
        _v4 = val1.centroid
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = val1.calyx
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fB().pack(_x.radius, _x.chosen_one))
      _x = self
      buff.write(_get_struct_3I().pack(_x.extractor_result.point_cloud.header.seq, _x.extractor_result.point_cloud.header.stamp.secs, _x.extractor_result.point_cloud.header.stamp.nsecs))
      _x = self.extractor_result.point_cloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.extractor_result.point_cloud.height, _x.extractor_result.point_cloud.width))
      length = len(self.extractor_result.point_cloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.extractor_result.point_cloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.extractor_result.point_cloud.is_bigendian, _x.extractor_result.point_cloud.point_step, _x.extractor_result.point_cloud.row_step))
      _x = self.extractor_result.point_cloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.extractor_result.point_cloud.is_dense
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.extractor_result is None:
        self.extractor_result = cares_msgs.msg.MetricExtractionResult()
      end = 0
      start = end
      end += 1
      (self.extractor_result.result,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.extractor_result.vine.cane_list = []
      for i in range(0, length):
        val1 = cares_msgs.msg.Cane()
        _x = val1
        start = end
        end += 19
        (_x.cane_id, _x.cane_type, _x.internode_length, _x.internode_width, _x.node_count,) = _get_struct_2B2dB().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.node_list = []
        for i in range(0, length):
          val2 = cares_msgs.msg.Node()
          _x = val2
          start = end
          end += 5
          (_x.node_id, _x.node_type,) = _get_struct_IB().unpack(str[start:end])
          _v6 = val2.position
          _x = _v6
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 4
          (val2.sequencial_neighbour_id,) = _get_struct_I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.neighbours = []
          for i in range(0, length):
            val3 = cares_msgs.msg.NodeNeighbourInfo()
            _x = val3
            start = end
            end += 20
            (_x.neighbour_id, _x.internode_length, _x.internode_width,) = _get_struct_I2d().unpack(str[start:end])
            val2.neighbours.append(val3)
          val1.node_list.append(val2)
        _v7 = val1.origin_node
        _x = _v7
        start = end
        end += 5
        (_x.node_id, _x.node_type,) = _get_struct_IB().unpack(str[start:end])
        _v8 = _v7.position
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v7.sequencial_neighbour_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v7.neighbours = []
        for i in range(0, length):
          val3 = cares_msgs.msg.NodeNeighbourInfo()
          _x = val3
          start = end
          end += 20
          (_x.neighbour_id, _x.internode_length, _x.internode_width,) = _get_struct_I2d().unpack(str[start:end])
          _v7.neighbours.append(val3)
        self.extractor_result.vine.cane_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.extractor_result.fruitlets.fruitlets = []
      for i in range(0, length):
        val1 = cares_msgs.msg.Fruitlet()
        start = end
        end += 1
        (val1.ID,) = _get_struct_B().unpack(str[start:end])
        _v9 = val1.centroid
        _x = _v9
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v10 = val1.calyx
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.radius, _x.chosen_one,) = _get_struct_fB().unpack(str[start:end])
        val1.chosen_one = bool(val1.chosen_one)
        self.extractor_result.fruitlets.fruitlets.append(val1)
      _x = self
      start = end
      end += 12
      (_x.extractor_result.point_cloud.header.seq, _x.extractor_result.point_cloud.header.stamp.secs, _x.extractor_result.point_cloud.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.extractor_result.point_cloud.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.extractor_result.point_cloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.extractor_result.point_cloud.height, _x.extractor_result.point_cloud.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.extractor_result.point_cloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.extractor_result.point_cloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.extractor_result.point_cloud.is_bigendian, _x.extractor_result.point_cloud.point_step, _x.extractor_result.point_cloud.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.extractor_result.point_cloud.is_bigendian = bool(self.extractor_result.point_cloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.extractor_result.point_cloud.data = str[start:end]
      start = end
      end += 1
      (self.extractor_result.point_cloud.is_dense,) = _get_struct_B().unpack(str[start:end])
      self.extractor_result.point_cloud.is_dense = bool(self.extractor_result.point_cloud.is_dense)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.extractor_result.result
      buff.write(_get_struct_B().pack(_x))
      length = len(self.extractor_result.vine.cane_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.extractor_result.vine.cane_list:
        _x = val1
        buff.write(_get_struct_2B2dB().pack(_x.cane_id, _x.cane_type, _x.internode_length, _x.internode_width, _x.node_count))
        length = len(val1.node_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.node_list:
          _x = val2
          buff.write(_get_struct_IB().pack(_x.node_id, _x.node_type))
          _v11 = val2.position
          _x = _v11
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2.sequencial_neighbour_id
          buff.write(_get_struct_I().pack(_x))
          length = len(val2.neighbours)
          buff.write(_struct_I.pack(length))
          for val3 in val2.neighbours:
            _x = val3
            buff.write(_get_struct_I2d().pack(_x.neighbour_id, _x.internode_length, _x.internode_width))
        _v12 = val1.origin_node
        _x = _v12
        buff.write(_get_struct_IB().pack(_x.node_id, _x.node_type))
        _v13 = _v12.position
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v12.sequencial_neighbour_id
        buff.write(_get_struct_I().pack(_x))
        length = len(_v12.neighbours)
        buff.write(_struct_I.pack(length))
        for val3 in _v12.neighbours:
          _x = val3
          buff.write(_get_struct_I2d().pack(_x.neighbour_id, _x.internode_length, _x.internode_width))
      length = len(self.extractor_result.fruitlets.fruitlets)
      buff.write(_struct_I.pack(length))
      for val1 in self.extractor_result.fruitlets.fruitlets:
        _x = val1.ID
        buff.write(_get_struct_B().pack(_x))
        _v14 = val1.centroid
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = val1.calyx
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fB().pack(_x.radius, _x.chosen_one))
      _x = self
      buff.write(_get_struct_3I().pack(_x.extractor_result.point_cloud.header.seq, _x.extractor_result.point_cloud.header.stamp.secs, _x.extractor_result.point_cloud.header.stamp.nsecs))
      _x = self.extractor_result.point_cloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.extractor_result.point_cloud.height, _x.extractor_result.point_cloud.width))
      length = len(self.extractor_result.point_cloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.extractor_result.point_cloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.extractor_result.point_cloud.is_bigendian, _x.extractor_result.point_cloud.point_step, _x.extractor_result.point_cloud.row_step))
      _x = self.extractor_result.point_cloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.extractor_result.point_cloud.is_dense
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.extractor_result is None:
        self.extractor_result = cares_msgs.msg.MetricExtractionResult()
      end = 0
      start = end
      end += 1
      (self.extractor_result.result,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.extractor_result.vine.cane_list = []
      for i in range(0, length):
        val1 = cares_msgs.msg.Cane()
        _x = val1
        start = end
        end += 19
        (_x.cane_id, _x.cane_type, _x.internode_length, _x.internode_width, _x.node_count,) = _get_struct_2B2dB().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.node_list = []
        for i in range(0, length):
          val2 = cares_msgs.msg.Node()
          _x = val2
          start = end
          end += 5
          (_x.node_id, _x.node_type,) = _get_struct_IB().unpack(str[start:end])
          _v16 = val2.position
          _x = _v16
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 4
          (val2.sequencial_neighbour_id,) = _get_struct_I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.neighbours = []
          for i in range(0, length):
            val3 = cares_msgs.msg.NodeNeighbourInfo()
            _x = val3
            start = end
            end += 20
            (_x.neighbour_id, _x.internode_length, _x.internode_width,) = _get_struct_I2d().unpack(str[start:end])
            val2.neighbours.append(val3)
          val1.node_list.append(val2)
        _v17 = val1.origin_node
        _x = _v17
        start = end
        end += 5
        (_x.node_id, _x.node_type,) = _get_struct_IB().unpack(str[start:end])
        _v18 = _v17.position
        _x = _v18
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v17.sequencial_neighbour_id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v17.neighbours = []
        for i in range(0, length):
          val3 = cares_msgs.msg.NodeNeighbourInfo()
          _x = val3
          start = end
          end += 20
          (_x.neighbour_id, _x.internode_length, _x.internode_width,) = _get_struct_I2d().unpack(str[start:end])
          _v17.neighbours.append(val3)
        self.extractor_result.vine.cane_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.extractor_result.fruitlets.fruitlets = []
      for i in range(0, length):
        val1 = cares_msgs.msg.Fruitlet()
        start = end
        end += 1
        (val1.ID,) = _get_struct_B().unpack(str[start:end])
        _v19 = val1.centroid
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v20 = val1.calyx
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 5
        (_x.radius, _x.chosen_one,) = _get_struct_fB().unpack(str[start:end])
        val1.chosen_one = bool(val1.chosen_one)
        self.extractor_result.fruitlets.fruitlets.append(val1)
      _x = self
      start = end
      end += 12
      (_x.extractor_result.point_cloud.header.seq, _x.extractor_result.point_cloud.header.stamp.secs, _x.extractor_result.point_cloud.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.extractor_result.point_cloud.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.extractor_result.point_cloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.extractor_result.point_cloud.height, _x.extractor_result.point_cloud.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.extractor_result.point_cloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.extractor_result.point_cloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.extractor_result.point_cloud.is_bigendian, _x.extractor_result.point_cloud.point_step, _x.extractor_result.point_cloud.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.extractor_result.point_cloud.is_bigendian = bool(self.extractor_result.point_cloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.extractor_result.point_cloud.data = str[start:end]
      start = end
      end += 1
      (self.extractor_result.point_cloud.is_dense,) = _get_struct_B().unpack(str[start:end])
      self.extractor_result.point_cloud.is_dense = bool(self.extractor_result.point_cloud.is_dense)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2dB = None
def _get_struct_2B2dB():
    global _struct_2B2dB
    if _struct_2B2dB is None:
        _struct_2B2dB = struct.Struct("<2B2dB")
    return _struct_2B2dB
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_I2d = None
def _get_struct_I2d():
    global _struct_I2d
    if _struct_I2d is None:
        _struct_I2d = struct.Struct("<I2d")
    return _struct_I2d
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
_struct_fB = None
def _get_struct_fB():
    global _struct_fB
    if _struct_fB is None:
        _struct_fB = struct.Struct("<fB")
    return _struct_fB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cares_msgs/MergeExtractorResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MergeExtractorResponse(genpy.Message):
  _md5sum = "eb13ac1f1354ccecb7941ee8fa2192e8"
  _type = "cares_msgs/MergeExtractorResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool result
"""
  __slots__ = ['result']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MergeExtractorResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
    else:
      self.result = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class MergeExtractor(object):
  _type          = 'cares_msgs/MergeExtractor'
  _md5sum = 'c7a1e353d0883bc00bd3ab6241f5d431'
  _request_class  = MergeExtractorRequest
  _response_class = MergeExtractorResponse

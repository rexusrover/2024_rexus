// Auto-generated. Do not edit!

// (in-package cares_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let CutPoint = require('./CutPoint.js');

//-----------------------------------------------------------

class CutResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.result = null;
      this.successful_cuts = null;
      this.failed_cuts = null;
    }
    else {
      if (initObj.hasOwnProperty('result')) {
        this.result = initObj.result
      }
      else {
        this.result = 0;
      }
      if (initObj.hasOwnProperty('successful_cuts')) {
        this.successful_cuts = initObj.successful_cuts
      }
      else {
        this.successful_cuts = [];
      }
      if (initObj.hasOwnProperty('failed_cuts')) {
        this.failed_cuts = initObj.failed_cuts
      }
      else {
        this.failed_cuts = [];
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type CutResult
    // Serialize message field [result]
    bufferOffset = _serializer.uint8(obj.result, buffer, bufferOffset);
    // Serialize message field [successful_cuts]
    // Serialize the length for message field [successful_cuts]
    bufferOffset = _serializer.uint32(obj.successful_cuts.length, buffer, bufferOffset);
    obj.successful_cuts.forEach((val) => {
      bufferOffset = CutPoint.serialize(val, buffer, bufferOffset);
    });
    // Serialize message field [failed_cuts]
    // Serialize the length for message field [failed_cuts]
    bufferOffset = _serializer.uint32(obj.failed_cuts.length, buffer, bufferOffset);
    obj.failed_cuts.forEach((val) => {
      bufferOffset = CutPoint.serialize(val, buffer, bufferOffset);
    });
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type CutResult
    let len;
    let data = new CutResult(null);
    // Deserialize message field [result]
    data.result = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [successful_cuts]
    // Deserialize array length for message field [successful_cuts]
    len = _deserializer.uint32(buffer, bufferOffset);
    data.successful_cuts = new Array(len);
    for (let i = 0; i < len; ++i) {
      data.successful_cuts[i] = CutPoint.deserialize(buffer, bufferOffset)
    }
    // Deserialize message field [failed_cuts]
    // Deserialize array length for message field [failed_cuts]
    len = _deserializer.uint32(buffer, bufferOffset);
    data.failed_cuts = new Array(len);
    for (let i = 0; i < len; ++i) {
      data.failed_cuts[i] = CutPoint.deserialize(buffer, bufferOffset)
    }
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += 48 * object.successful_cuts.length;
    length += 48 * object.failed_cuts.length;
    return length + 9;
  }

  static datatype() {
    // Returns string type for a message object
    return 'cares_msgs/CutResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'e20698bfa6757b52e96eeb2fe94ba71b';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    uint8 result
    cares_msgs/CutPoint[] successful_cuts
    cares_msgs/CutPoint[] failed_cuts
    
    ================================================================================
    MSG: cares_msgs/CutPoint
    geometry_msgs/Point cut_point_a
    geometry_msgs/Point cut_point_b
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new CutResult(null);
    if (msg.result !== undefined) {
      resolved.result = msg.result;
    }
    else {
      resolved.result = 0
    }

    if (msg.successful_cuts !== undefined) {
      resolved.successful_cuts = new Array(msg.successful_cuts.length);
      for (let i = 0; i < resolved.successful_cuts.length; ++i) {
        resolved.successful_cuts[i] = CutPoint.Resolve(msg.successful_cuts[i]);
      }
    }
    else {
      resolved.successful_cuts = []
    }

    if (msg.failed_cuts !== undefined) {
      resolved.failed_cuts = new Array(msg.failed_cuts.length);
      for (let i = 0; i < resolved.failed_cuts.length; ++i) {
        resolved.failed_cuts[i] = CutPoint.Resolve(msg.failed_cuts[i]);
      }
    }
    else {
      resolved.failed_cuts = []
    }

    return resolved;
    }
};

module.exports = CutResult;

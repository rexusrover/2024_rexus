// Auto-generated. Do not edit!

// (in-package cares_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let MetricExtractionActionGoal = require('./MetricExtractionActionGoal.js');
let MetricExtractionActionResult = require('./MetricExtractionActionResult.js');
let MetricExtractionActionFeedback = require('./MetricExtractionActionFeedback.js');

//-----------------------------------------------------------

class MetricExtractionAction {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.action_goal = null;
      this.action_result = null;
      this.action_feedback = null;
    }
    else {
      if (initObj.hasOwnProperty('action_goal')) {
        this.action_goal = initObj.action_goal
      }
      else {
        this.action_goal = new MetricExtractionActionGoal();
      }
      if (initObj.hasOwnProperty('action_result')) {
        this.action_result = initObj.action_result
      }
      else {
        this.action_result = new MetricExtractionActionResult();
      }
      if (initObj.hasOwnProperty('action_feedback')) {
        this.action_feedback = initObj.action_feedback
      }
      else {
        this.action_feedback = new MetricExtractionActionFeedback();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type MetricExtractionAction
    // Serialize message field [action_goal]
    bufferOffset = MetricExtractionActionGoal.serialize(obj.action_goal, buffer, bufferOffset);
    // Serialize message field [action_result]
    bufferOffset = MetricExtractionActionResult.serialize(obj.action_result, buffer, bufferOffset);
    // Serialize message field [action_feedback]
    bufferOffset = MetricExtractionActionFeedback.serialize(obj.action_feedback, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type MetricExtractionAction
    let len;
    let data = new MetricExtractionAction(null);
    // Deserialize message field [action_goal]
    data.action_goal = MetricExtractionActionGoal.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_result]
    data.action_result = MetricExtractionActionResult.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_feedback]
    data.action_feedback = MetricExtractionActionFeedback.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += MetricExtractionActionGoal.getMessageSize(object.action_goal);
    length += MetricExtractionActionResult.getMessageSize(object.action_result);
    length += MetricExtractionActionFeedback.getMessageSize(object.action_feedback);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'cares_msgs/MetricExtractionAction';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '15db5c0d780c3baee6348caf51b17053';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    MetricExtractionActionGoal action_goal
    MetricExtractionActionResult action_result
    MetricExtractionActionFeedback action_feedback
    
    ================================================================================
    MSG: cares_msgs/MetricExtractionActionGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalID goal_id
    MetricExtractionGoal goal
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: actionlib_msgs/GoalID
    # The stamp should store the time at which this goal was requested.
    # It is used by an action server when it tries to preempt all
    # goals that were requested before a certain time
    time stamp
    
    # The id provides a way to associate feedback and
    # result message with specific goal requests. The id
    # specified must be unique.
    string id
    
    
    ================================================================================
    MSG: cares_msgs/MetricExtractionGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal definition
    # Arm Command Enumeration
    uint8 RESET    = 0
    uint8 CAPTURE  = 1
    uint8 MEASURE  = 2
    
    # Arm command
    uint8 command
    
    # Path to save data too
    std_msgs/String file_path
    
    ================================================================================
    MSG: std_msgs/String
    string data
    
    ================================================================================
    MSG: cares_msgs/MetricExtractionActionResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    MetricExtractionResult result
    
    ================================================================================
    MSG: actionlib_msgs/GoalStatus
    GoalID goal_id
    uint8 status
    uint8 PENDING         = 0   # The goal has yet to be processed by the action server
    uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
    uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                                #   and has since completed its execution (Terminal State)
    uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
    uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                                #    to some failure (Terminal State)
    uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                                #    because the goal was unattainable or invalid (Terminal State)
    uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                                #    and has not yet completed execution
    uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                                #    but the action server has not yet confirmed that the goal is canceled
    uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                                #    and was successfully cancelled (Terminal State)
    uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                                #    sent over the wire by an action server
    
    #Allow for the user to associate a string with GoalStatus for debugging
    string text
    
    
    ================================================================================
    MSG: cares_msgs/MetricExtractionResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #result definition
    uint8 result
    cares_msgs/Vine vine
    cares_msgs/Fruitlets fruitlets
    sensor_msgs/PointCloud2 point_cloud
    
    ================================================================================
    MSG: cares_msgs/Vine
    cares_msgs/Cane[] cane_list
    ================================================================================
    MSG: cares_msgs/Cane
    uint8 cane_id
    uint8 cane_type
    
    float64 internode_length
    float64 internode_width
    uint8 node_count
    
    cares_msgs/Node[] node_list
    cares_msgs/Node origin_node
    
    ================================================================================
    MSG: cares_msgs/Node
    uint32 node_id
    
    #Node Type
    uint8  PRIMARY_ORIGIN_NODE = 0
    uint8  REGULAR_NODE = 1
    uint8  MULTI_NODE = 2
    uint8  UNLINKED_NODE = 3
    uint8  node_type
    
    geometry_msgs/Point position
    
    uint32 sequencial_neighbour_id
    cares_msgs/NodeNeighbourInfo[] neighbours
    
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: cares_msgs/NodeNeighbourInfo
    uint32 neighbour_id
    float64 internode_length
    float64 internode_width
    ================================================================================
    MSG: cares_msgs/Fruitlets
    cares_msgs/Fruitlet[] fruitlets 
    
    ================================================================================
    MSG: cares_msgs/Fruitlet
    uint8 ID
    geometry_msgs/Point centroid
    geometry_msgs/Point calyx 
    float32 radius
    bool chosen_one
    
    ================================================================================
    MSG: sensor_msgs/PointCloud2
    # This message holds a collection of N-dimensional points, which may
    # contain additional information such as normals, intensity, etc. The
    # point data is stored as a binary blob, its layout described by the
    # contents of the "fields" array.
    
    # The point cloud data may be organized 2d (image-like) or 1d
    # (unordered). Point clouds organized as 2d images may be produced by
    # camera depth sensors such as stereo or time-of-flight.
    
    # Time of sensor data acquisition, and the coordinate frame ID (for 3d
    # points).
    Header header
    
    # 2D structure of the point cloud. If the cloud is unordered, height is
    # 1 and width is the length of the point cloud.
    uint32 height
    uint32 width
    
    # Describes the channels and their layout in the binary data blob.
    PointField[] fields
    
    bool    is_bigendian # Is this data bigendian?
    uint32  point_step   # Length of a point in bytes
    uint32  row_step     # Length of a row in bytes
    uint8[] data         # Actual point data, size is (row_step*height)
    
    bool is_dense        # True if there are no invalid points
    
    ================================================================================
    MSG: sensor_msgs/PointField
    # This message holds the description of one point entry in the
    # PointCloud2 message format.
    uint8 INT8    = 1
    uint8 UINT8   = 2
    uint8 INT16   = 3
    uint8 UINT16  = 4
    uint8 INT32   = 5
    uint8 UINT32  = 6
    uint8 FLOAT32 = 7
    uint8 FLOAT64 = 8
    
    string name      # Name of field
    uint32 offset    # Offset from start of point struct
    uint8  datatype  # Datatype enumeration, see above
    uint32 count     # How many elements in the field
    
    ================================================================================
    MSG: cares_msgs/MetricExtractionActionFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    MetricExtractionFeedback feedback
    
    ================================================================================
    MSG: cares_msgs/MetricExtractionFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #feedback definition
    #Enumeration
    uint8 CAPTURING = 0
    uint8 MEASURING = 1
    #Task status
    uint8 status
    
    uint8 processed
    uint8 queued
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new MetricExtractionAction(null);
    if (msg.action_goal !== undefined) {
      resolved.action_goal = MetricExtractionActionGoal.Resolve(msg.action_goal)
    }
    else {
      resolved.action_goal = new MetricExtractionActionGoal()
    }

    if (msg.action_result !== undefined) {
      resolved.action_result = MetricExtractionActionResult.Resolve(msg.action_result)
    }
    else {
      resolved.action_result = new MetricExtractionActionResult()
    }

    if (msg.action_feedback !== undefined) {
      resolved.action_feedback = MetricExtractionActionFeedback.Resolve(msg.action_feedback)
    }
    else {
      resolved.action_feedback = new MetricExtractionActionFeedback()
    }

    return resolved;
    }
};

module.exports = MetricExtractionAction;

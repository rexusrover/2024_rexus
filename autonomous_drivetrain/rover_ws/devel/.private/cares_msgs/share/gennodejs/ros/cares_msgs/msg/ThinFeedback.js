// Auto-generated. Do not edit!

// (in-package cares_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let ActuationFeedback = require('./ActuationFeedback.js');

//-----------------------------------------------------------

class ThinFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.count = null;
      this.total = null;
      this.status = null;
      this.actuation_feedback = null;
    }
    else {
      if (initObj.hasOwnProperty('count')) {
        this.count = initObj.count
      }
      else {
        this.count = 0;
      }
      if (initObj.hasOwnProperty('total')) {
        this.total = initObj.total
      }
      else {
        this.total = 0;
      }
      if (initObj.hasOwnProperty('status')) {
        this.status = initObj.status
      }
      else {
        this.status = 0;
      }
      if (initObj.hasOwnProperty('actuation_feedback')) {
        this.actuation_feedback = initObj.actuation_feedback
      }
      else {
        this.actuation_feedback = new ActuationFeedback();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type ThinFeedback
    // Serialize message field [count]
    bufferOffset = _serializer.uint8(obj.count, buffer, bufferOffset);
    // Serialize message field [total]
    bufferOffset = _serializer.uint8(obj.total, buffer, bufferOffset);
    // Serialize message field [status]
    bufferOffset = _serializer.uint8(obj.status, buffer, bufferOffset);
    // Serialize message field [actuation_feedback]
    bufferOffset = ActuationFeedback.serialize(obj.actuation_feedback, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type ThinFeedback
    let len;
    let data = new ThinFeedback(null);
    // Deserialize message field [count]
    data.count = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [total]
    data.total = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [status]
    data.status = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [actuation_feedback]
    data.actuation_feedback = ActuationFeedback.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 4;
  }

  static datatype() {
    // Returns string type for a message object
    return 'cares_msgs/ThinFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '2bdcbbbd3184582bccd9e58d21052bb2';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    uint8 count
    uint8 total
    
    uint8 INIT = 0
    uint8 PROCESSING_THIN_POINTS = 1
    uint8 THINNING_FRUITLET = 2
    uint8 STOPPING = 3
    uint8 TRANSITIONING = 4
    
    uint8 status
    cares_msgs/ActuationFeedback actuation_feedback
    
    
    ================================================================================
    MSG: cares_msgs/ActuationFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    uint8 INIT       = 0
    uint8 MOVING_TO_APPROACH = 1
    uint8 MOVING_TO_TARGET   = 3
    uint8 MOVING_BACK_TO_APPROACH   = 4
    uint8 ACTUATING          = 5
    uint8 STOPPING           = 6
    
    uint8 feedback
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new ThinFeedback(null);
    if (msg.count !== undefined) {
      resolved.count = msg.count;
    }
    else {
      resolved.count = 0
    }

    if (msg.total !== undefined) {
      resolved.total = msg.total;
    }
    else {
      resolved.total = 0
    }

    if (msg.status !== undefined) {
      resolved.status = msg.status;
    }
    else {
      resolved.status = 0
    }

    if (msg.actuation_feedback !== undefined) {
      resolved.actuation_feedback = ActuationFeedback.Resolve(msg.actuation_feedback)
    }
    else {
      resolved.actuation_feedback = new ActuationFeedback()
    }

    return resolved;
    }
};

// Constants for message
ThinFeedback.Constants = {
  INIT: 0,
  PROCESSING_THIN_POINTS: 1,
  THINNING_FRUITLET: 2,
  STOPPING: 3,
  TRANSITIONING: 4,
}

module.exports = ThinFeedback;

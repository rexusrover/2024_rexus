;; Auto-generated. Do not edit!


(when (boundp 'cares_msgs::MetricExtractionResult)
  (if (not (find-package "CARES_MSGS"))
    (make-package "CARES_MSGS"))
  (shadow 'MetricExtractionResult (find-package "CARES_MSGS")))
(unless (find-package "CARES_MSGS::METRICEXTRACTIONRESULT")
  (make-package "CARES_MSGS::METRICEXTRACTIONRESULT"))

(in-package "ROS")
;;//! \htmlinclude MetricExtractionResult.msg.html
(if (not (find-package "SENSOR_MSGS"))
  (ros::roseus-add-msgs "sensor_msgs"))


(defclass cares_msgs::MetricExtractionResult
  :super ros::object
  :slots (_result _vine _fruitlets _point_cloud ))

(defmethod cares_msgs::MetricExtractionResult
  (:init
   (&key
    ((:result __result) 0)
    ((:vine __vine) (instance cares_msgs::Vine :init))
    ((:fruitlets __fruitlets) (instance cares_msgs::Fruitlets :init))
    ((:point_cloud __point_cloud) (instance sensor_msgs::PointCloud2 :init))
    )
   (send-super :init)
   (setq _result (round __result))
   (setq _vine __vine)
   (setq _fruitlets __fruitlets)
   (setq _point_cloud __point_cloud)
   self)
  (:result
   (&optional __result)
   (if __result (setq _result __result)) _result)
  (:vine
   (&rest __vine)
   (if (keywordp (car __vine))
       (send* _vine __vine)
     (progn
       (if __vine (setq _vine (car __vine)))
       _vine)))
  (:fruitlets
   (&rest __fruitlets)
   (if (keywordp (car __fruitlets))
       (send* _fruitlets __fruitlets)
     (progn
       (if __fruitlets (setq _fruitlets (car __fruitlets)))
       _fruitlets)))
  (:point_cloud
   (&rest __point_cloud)
   (if (keywordp (car __point_cloud))
       (send* _point_cloud __point_cloud)
     (progn
       (if __point_cloud (setq _point_cloud (car __point_cloud)))
       _point_cloud)))
  (:serialization-length
   ()
   (+
    ;; uint8 _result
    1
    ;; cares_msgs/Vine _vine
    (send _vine :serialization-length)
    ;; cares_msgs/Fruitlets _fruitlets
    (send _fruitlets :serialization-length)
    ;; sensor_msgs/PointCloud2 _point_cloud
    (send _point_cloud :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint8 _result
       (write-byte _result s)
     ;; cares_msgs/Vine _vine
       (send _vine :serialize s)
     ;; cares_msgs/Fruitlets _fruitlets
       (send _fruitlets :serialize s)
     ;; sensor_msgs/PointCloud2 _point_cloud
       (send _point_cloud :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint8 _result
     (setq _result (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; cares_msgs/Vine _vine
     (send _vine :deserialize buf ptr-) (incf ptr- (send _vine :serialization-length))
   ;; cares_msgs/Fruitlets _fruitlets
     (send _fruitlets :deserialize buf ptr-) (incf ptr- (send _fruitlets :serialization-length))
   ;; sensor_msgs/PointCloud2 _point_cloud
     (send _point_cloud :deserialize buf ptr-) (incf ptr- (send _point_cloud :serialization-length))
   ;;
   self)
  )

(setf (get cares_msgs::MetricExtractionResult :md5sum-) "c2a9ce6ac04d25549c31e0c74e3f8c2d")
(setf (get cares_msgs::MetricExtractionResult :datatype-) "cares_msgs/MetricExtractionResult")
(setf (get cares_msgs::MetricExtractionResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result definition
uint8 result
cares_msgs/Vine vine
cares_msgs/Fruitlets fruitlets
sensor_msgs/PointCloud2 point_cloud

================================================================================
MSG: cares_msgs/Vine
cares_msgs/Cane[] cane_list
================================================================================
MSG: cares_msgs/Cane
uint8 cane_id
uint8 cane_type

float64 internode_length
float64 internode_width
uint8 node_count

cares_msgs/Node[] node_list
cares_msgs/Node origin_node

================================================================================
MSG: cares_msgs/Node
uint32 node_id

#Node Type
uint8  PRIMARY_ORIGIN_NODE = 0
uint8  REGULAR_NODE = 1
uint8  MULTI_NODE = 2
uint8  UNLINKED_NODE = 3
uint8  node_type

geometry_msgs/Point position

uint32 sequencial_neighbour_id
cares_msgs/NodeNeighbourInfo[] neighbours


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: cares_msgs/NodeNeighbourInfo
uint32 neighbour_id
float64 internode_length
float64 internode_width
================================================================================
MSG: cares_msgs/Fruitlets
cares_msgs/Fruitlet[] fruitlets 

================================================================================
MSG: cares_msgs/Fruitlet
uint8 ID
geometry_msgs/Point centroid
geometry_msgs/Point calyx 
float32 radius
bool chosen_one

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the \"fields\" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

")



(provide :cares_msgs/MetricExtractionResult "c2a9ce6ac04d25549c31e0c74e3f8c2d")



;; Auto-generated. Do not edit!


(when (boundp 'cares_msgs::ActuationResult)
  (if (not (find-package "CARES_MSGS"))
    (make-package "CARES_MSGS"))
  (shadow 'ActuationResult (find-package "CARES_MSGS")))
(unless (find-package "CARES_MSGS::ACTUATIONRESULT")
  (make-package "CARES_MSGS::ACTUATIONRESULT"))

(in-package "ROS")
;;//! \htmlinclude ActuationResult.msg.html


(intern "*FAILED_TO_REACH_APPROACH*" (find-package "CARES_MSGS::ACTUATIONRESULT"))
(shadow '*FAILED_TO_REACH_APPROACH* (find-package "CARES_MSGS::ACTUATIONRESULT"))
(defconstant cares_msgs::ActuationResult::*FAILED_TO_REACH_APPROACH* 0)
(intern "*FAILED_TO_REACH_TARGET*" (find-package "CARES_MSGS::ACTUATIONRESULT"))
(shadow '*FAILED_TO_REACH_TARGET* (find-package "CARES_MSGS::ACTUATIONRESULT"))
(defconstant cares_msgs::ActuationResult::*FAILED_TO_REACH_TARGET* 1)
(intern "*ACTUATOR_NOT_OPEN*" (find-package "CARES_MSGS::ACTUATIONRESULT"))
(shadow '*ACTUATOR_NOT_OPEN* (find-package "CARES_MSGS::ACTUATIONRESULT"))
(defconstant cares_msgs::ActuationResult::*ACTUATOR_NOT_OPEN* 2)
(intern "*FAILED_TO_ACTUATE*" (find-package "CARES_MSGS::ACTUATIONRESULT"))
(shadow '*FAILED_TO_ACTUATE* (find-package "CARES_MSGS::ACTUATIONRESULT"))
(defconstant cares_msgs::ActuationResult::*FAILED_TO_ACTUATE* 3)

(defun cares_msgs::ActuationResult-to-symbol (const)
  (cond
        ((= const 0) 'cares_msgs::ActuationResult::*FAILED_TO_REACH_APPROACH*)
        ((= const 1) 'cares_msgs::ActuationResult::*FAILED_TO_REACH_TARGET*)
        ((= const 2) 'cares_msgs::ActuationResult::*ACTUATOR_NOT_OPEN*)
        ((= const 3) 'cares_msgs::ActuationResult::*FAILED_TO_ACTUATE*)
        (t nil)))

(defclass cares_msgs::ActuationResult
  :super ros::object
  :slots (_result _failure_reason ))

(defmethod cares_msgs::ActuationResult
  (:init
   (&key
    ((:result __result) 0)
    ((:failure_reason __failure_reason) 0)
    )
   (send-super :init)
   (setq _result (round __result))
   (setq _failure_reason (round __failure_reason))
   self)
  (:result
   (&optional __result)
   (if __result (setq _result __result)) _result)
  (:failure_reason
   (&optional __failure_reason)
   (if __failure_reason (setq _failure_reason __failure_reason)) _failure_reason)
  (:serialization-length
   ()
   (+
    ;; uint8 _result
    1
    ;; uint8 _failure_reason
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint8 _result
       (write-byte _result s)
     ;; uint8 _failure_reason
       (write-byte _failure_reason s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint8 _result
     (setq _result (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; uint8 _failure_reason
     (setq _failure_reason (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;;
   self)
  )

(setf (get cares_msgs::ActuationResult :md5sum-) "081cd5fc5c591111cd712dd6bca9d6fd")
(setf (get cares_msgs::ActuationResult :datatype-) "cares_msgs/ActuationResult")
(setf (get cares_msgs::ActuationResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
uint8 result
uint8 FAILED_TO_REACH_APPROACH = 0
uint8 FAILED_TO_REACH_TARGET = 1
uint8 ACTUATOR_NOT_OPEN = 2
uint8 FAILED_TO_ACTUATE = 3
uint8 failure_reason


")



(provide :cares_msgs/ActuationResult "081cd5fc5c591111cd712dd6bca9d6fd")



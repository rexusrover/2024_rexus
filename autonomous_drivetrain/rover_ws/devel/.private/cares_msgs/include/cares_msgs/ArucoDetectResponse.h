// Generated by gencpp from file cares_msgs/ArucoDetectResponse.msg
// DO NOT EDIT!


#ifndef CARES_MSGS_MESSAGE_ARUCODETECTRESPONSE_H
#define CARES_MSGS_MESSAGE_ARUCODETECTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/TransformStamped.h>

namespace cares_msgs
{
template <class ContainerAllocator>
struct ArucoDetectResponse_
{
  typedef ArucoDetectResponse_<ContainerAllocator> Type;

  ArucoDetectResponse_()
    : ids()
    , transforms()  {
    }
  ArucoDetectResponse_(const ContainerAllocator& _alloc)
    : ids(_alloc)
    , transforms(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _ids_type;
  _ids_type ids;

   typedef std::vector< ::geometry_msgs::TransformStamped_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::TransformStamped_<ContainerAllocator> >> _transforms_type;
  _transforms_type transforms;





  typedef boost::shared_ptr< ::cares_msgs::ArucoDetectResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cares_msgs::ArucoDetectResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ArucoDetectResponse_

typedef ::cares_msgs::ArucoDetectResponse_<std::allocator<void> > ArucoDetectResponse;

typedef boost::shared_ptr< ::cares_msgs::ArucoDetectResponse > ArucoDetectResponsePtr;
typedef boost::shared_ptr< ::cares_msgs::ArucoDetectResponse const> ArucoDetectResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cares_msgs::ArucoDetectResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cares_msgs::ArucoDetectResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cares_msgs::ArucoDetectResponse_<ContainerAllocator1> & lhs, const ::cares_msgs::ArucoDetectResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ids == rhs.ids &&
    lhs.transforms == rhs.transforms;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cares_msgs::ArucoDetectResponse_<ContainerAllocator1> & lhs, const ::cares_msgs::ArucoDetectResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cares_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::ArucoDetectResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::ArucoDetectResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::ArucoDetectResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::ArucoDetectResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::ArucoDetectResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::ArucoDetectResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cares_msgs::ArucoDetectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "885aee3361833c4954afd3b982745905";
  }

  static const char* value(const ::cares_msgs::ArucoDetectResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x885aee3361833c49ULL;
  static const uint64_t static_value2 = 0x54afd3b982745905ULL;
};

template<class ContainerAllocator>
struct DataType< ::cares_msgs::ArucoDetectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cares_msgs/ArucoDetectResponse";
  }

  static const char* value(const ::cares_msgs::ArucoDetectResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cares_msgs::ArucoDetectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] ids\n"
"geometry_msgs/TransformStamped[] transforms\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TransformStamped\n"
"# This expresses a transform from coordinate frame header.frame_id\n"
"# to the coordinate frame child_frame_id\n"
"#\n"
"# This message is mostly used by the \n"
"# <a href=\"http://wiki.ros.org/tf\">tf</a> package. \n"
"# See its documentation for more information.\n"
"\n"
"Header header\n"
"string child_frame_id # the frame id of the child frame\n"
"Transform transform\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::cares_msgs::ArucoDetectResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cares_msgs::ArucoDetectResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ids);
      stream.next(m.transforms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArucoDetectResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cares_msgs::ArucoDetectResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cares_msgs::ArucoDetectResponse_<ContainerAllocator>& v)
  {
    s << indent << "ids[]" << std::endl;
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      s << indent << "  ids[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.ids[i]);
    }
    s << indent << "transforms[]" << std::endl;
    for (size_t i = 0; i < v.transforms.size(); ++i)
    {
      s << indent << "  transforms[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::TransformStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.transforms[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARES_MSGS_MESSAGE_ARUCODETECTRESPONSE_H

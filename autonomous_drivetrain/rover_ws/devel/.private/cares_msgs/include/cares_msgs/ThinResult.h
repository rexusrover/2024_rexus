// Generated by gencpp from file cares_msgs/ThinResult.msg
// DO NOT EDIT!


#ifndef CARES_MSGS_MESSAGE_THINRESULT_H
#define CARES_MSGS_MESSAGE_THINRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cares_msgs/Fruitlet.h>
#include <cares_msgs/Fruitlet.h>

namespace cares_msgs
{
template <class ContainerAllocator>
struct ThinResult_
{
  typedef ThinResult_<ContainerAllocator> Type;

  ThinResult_()
    : result(0)
    , succeeded()
    , failed()  {
    }
  ThinResult_(const ContainerAllocator& _alloc)
    : result(0)
    , succeeded(_alloc)
    , failed(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _result_type;
  _result_type result;

   typedef std::vector< ::cares_msgs::Fruitlet_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cares_msgs::Fruitlet_<ContainerAllocator> >> _succeeded_type;
  _succeeded_type succeeded;

   typedef std::vector< ::cares_msgs::Fruitlet_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cares_msgs::Fruitlet_<ContainerAllocator> >> _failed_type;
  _failed_type failed;





  typedef boost::shared_ptr< ::cares_msgs::ThinResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cares_msgs::ThinResult_<ContainerAllocator> const> ConstPtr;

}; // struct ThinResult_

typedef ::cares_msgs::ThinResult_<std::allocator<void> > ThinResult;

typedef boost::shared_ptr< ::cares_msgs::ThinResult > ThinResultPtr;
typedef boost::shared_ptr< ::cares_msgs::ThinResult const> ThinResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cares_msgs::ThinResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cares_msgs::ThinResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cares_msgs::ThinResult_<ContainerAllocator1> & lhs, const ::cares_msgs::ThinResult_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.succeeded == rhs.succeeded &&
    lhs.failed == rhs.failed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cares_msgs::ThinResult_<ContainerAllocator1> & lhs, const ::cares_msgs::ThinResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cares_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::ThinResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::ThinResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::ThinResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::ThinResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::ThinResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::ThinResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cares_msgs::ThinResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c9c3d8639eec8f454cb407630537d31";
  }

  static const char* value(const ::cares_msgs::ThinResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c9c3d8639eec8f4ULL;
  static const uint64_t static_value2 = 0x54cb407630537d31ULL;
};

template<class ContainerAllocator>
struct DataType< ::cares_msgs::ThinResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cares_msgs/ThinResult";
  }

  static const char* value(const ::cares_msgs::ThinResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cares_msgs::ThinResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"uint8 result\n"
"cares_msgs/Fruitlet[] succeeded\n"
"cares_msgs/Fruitlet[] failed\n"
"\n"
"================================================================================\n"
"MSG: cares_msgs/Fruitlet\n"
"uint8 ID\n"
"geometry_msgs/Point centroid\n"
"geometry_msgs/Point calyx \n"
"float32 radius\n"
"bool chosen_one\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cares_msgs::ThinResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cares_msgs::ThinResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.succeeded);
      stream.next(m.failed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ThinResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cares_msgs::ThinResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cares_msgs::ThinResult_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
    s << indent << "succeeded[]" << std::endl;
    for (size_t i = 0; i < v.succeeded.size(); ++i)
    {
      s << indent << "  succeeded[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cares_msgs::Fruitlet_<ContainerAllocator> >::stream(s, indent + "    ", v.succeeded[i]);
    }
    s << indent << "failed[]" << std::endl;
    for (size_t i = 0; i < v.failed.size(); ++i)
    {
      s << indent << "  failed[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cares_msgs::Fruitlet_<ContainerAllocator> >::stream(s, indent + "    ", v.failed[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARES_MSGS_MESSAGE_THINRESULT_H

// Generated by gencpp from file cares_msgs/Vine.msg
// DO NOT EDIT!


#ifndef CARES_MSGS_MESSAGE_VINE_H
#define CARES_MSGS_MESSAGE_VINE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cares_msgs/Cane.h>

namespace cares_msgs
{
template <class ContainerAllocator>
struct Vine_
{
  typedef Vine_<ContainerAllocator> Type;

  Vine_()
    : cane_list()  {
    }
  Vine_(const ContainerAllocator& _alloc)
    : cane_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::cares_msgs::Cane_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cares_msgs::Cane_<ContainerAllocator> >> _cane_list_type;
  _cane_list_type cane_list;





  typedef boost::shared_ptr< ::cares_msgs::Vine_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cares_msgs::Vine_<ContainerAllocator> const> ConstPtr;

}; // struct Vine_

typedef ::cares_msgs::Vine_<std::allocator<void> > Vine;

typedef boost::shared_ptr< ::cares_msgs::Vine > VinePtr;
typedef boost::shared_ptr< ::cares_msgs::Vine const> VineConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cares_msgs::Vine_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cares_msgs::Vine_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cares_msgs::Vine_<ContainerAllocator1> & lhs, const ::cares_msgs::Vine_<ContainerAllocator2> & rhs)
{
  return lhs.cane_list == rhs.cane_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cares_msgs::Vine_<ContainerAllocator1> & lhs, const ::cares_msgs::Vine_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cares_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::Vine_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::Vine_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::Vine_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::Vine_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::Vine_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::Vine_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cares_msgs::Vine_<ContainerAllocator> >
{
  static const char* value()
  {
    return "12a641acbf6a778d8aed58c6eaa43379";
  }

  static const char* value(const ::cares_msgs::Vine_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x12a641acbf6a778dULL;
  static const uint64_t static_value2 = 0x8aed58c6eaa43379ULL;
};

template<class ContainerAllocator>
struct DataType< ::cares_msgs::Vine_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cares_msgs/Vine";
  }

  static const char* value(const ::cares_msgs::Vine_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cares_msgs::Vine_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cares_msgs/Cane[] cane_list\n"
"================================================================================\n"
"MSG: cares_msgs/Cane\n"
"uint8 cane_id\n"
"uint8 cane_type\n"
"\n"
"float64 internode_length\n"
"float64 internode_width\n"
"uint8 node_count\n"
"\n"
"cares_msgs/Node[] node_list\n"
"cares_msgs/Node origin_node\n"
"\n"
"================================================================================\n"
"MSG: cares_msgs/Node\n"
"uint32 node_id\n"
"\n"
"#Node Type\n"
"uint8  PRIMARY_ORIGIN_NODE = 0\n"
"uint8  REGULAR_NODE = 1\n"
"uint8  MULTI_NODE = 2\n"
"uint8  UNLINKED_NODE = 3\n"
"uint8  node_type\n"
"\n"
"geometry_msgs/Point position\n"
"\n"
"uint32 sequencial_neighbour_id\n"
"cares_msgs/NodeNeighbourInfo[] neighbours\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: cares_msgs/NodeNeighbourInfo\n"
"uint32 neighbour_id\n"
"float64 internode_length\n"
"float64 internode_width\n"
;
  }

  static const char* value(const ::cares_msgs::Vine_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cares_msgs::Vine_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cane_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vine_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cares_msgs::Vine_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cares_msgs::Vine_<ContainerAllocator>& v)
  {
    s << indent << "cane_list[]" << std::endl;
    for (size_t i = 0; i < v.cane_list.size(); ++i)
    {
      s << indent << "  cane_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cares_msgs::Cane_<ContainerAllocator> >::stream(s, indent + "    ", v.cane_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARES_MSGS_MESSAGE_VINE_H

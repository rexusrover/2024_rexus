// Generated by gencpp from file cares_msgs/ThinFeedback.msg
// DO NOT EDIT!


#ifndef CARES_MSGS_MESSAGE_THINFEEDBACK_H
#define CARES_MSGS_MESSAGE_THINFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cares_msgs/ActuationFeedback.h>

namespace cares_msgs
{
template <class ContainerAllocator>
struct ThinFeedback_
{
  typedef ThinFeedback_<ContainerAllocator> Type;

  ThinFeedback_()
    : count(0)
    , total(0)
    , status(0)
    , actuation_feedback()  {
    }
  ThinFeedback_(const ContainerAllocator& _alloc)
    : count(0)
    , total(0)
    , status(0)
    , actuation_feedback(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _count_type;
  _count_type count;

   typedef uint8_t _total_type;
  _total_type total;

   typedef uint8_t _status_type;
  _status_type status;

   typedef  ::cares_msgs::ActuationFeedback_<ContainerAllocator>  _actuation_feedback_type;
  _actuation_feedback_type actuation_feedback;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(INIT)
  #undef INIT
#endif
#if defined(_WIN32) && defined(PROCESSING_THIN_POINTS)
  #undef PROCESSING_THIN_POINTS
#endif
#if defined(_WIN32) && defined(THINNING_FRUITLET)
  #undef THINNING_FRUITLET
#endif
#if defined(_WIN32) && defined(STOPPING)
  #undef STOPPING
#endif
#if defined(_WIN32) && defined(TRANSITIONING)
  #undef TRANSITIONING
#endif

  enum {
    INIT = 0u,
    PROCESSING_THIN_POINTS = 1u,
    THINNING_FRUITLET = 2u,
    STOPPING = 3u,
    TRANSITIONING = 4u,
  };


  typedef boost::shared_ptr< ::cares_msgs::ThinFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cares_msgs::ThinFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ThinFeedback_

typedef ::cares_msgs::ThinFeedback_<std::allocator<void> > ThinFeedback;

typedef boost::shared_ptr< ::cares_msgs::ThinFeedback > ThinFeedbackPtr;
typedef boost::shared_ptr< ::cares_msgs::ThinFeedback const> ThinFeedbackConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cares_msgs::ThinFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cares_msgs::ThinFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cares_msgs::ThinFeedback_<ContainerAllocator1> & lhs, const ::cares_msgs::ThinFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.count == rhs.count &&
    lhs.total == rhs.total &&
    lhs.status == rhs.status &&
    lhs.actuation_feedback == rhs.actuation_feedback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cares_msgs::ThinFeedback_<ContainerAllocator1> & lhs, const ::cares_msgs::ThinFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cares_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::ThinFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::ThinFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::ThinFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::ThinFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::ThinFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::ThinFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cares_msgs::ThinFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2bdcbbbd3184582bccd9e58d21052bb2";
  }

  static const char* value(const ::cares_msgs::ThinFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2bdcbbbd3184582bULL;
  static const uint64_t static_value2 = 0xccd9e58d21052bb2ULL;
};

template<class ContainerAllocator>
struct DataType< ::cares_msgs::ThinFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cares_msgs/ThinFeedback";
  }

  static const char* value(const ::cares_msgs::ThinFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cares_msgs::ThinFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"uint8 count\n"
"uint8 total\n"
"\n"
"uint8 INIT = 0\n"
"uint8 PROCESSING_THIN_POINTS = 1\n"
"uint8 THINNING_FRUITLET = 2\n"
"uint8 STOPPING = 3\n"
"uint8 TRANSITIONING = 4\n"
"\n"
"uint8 status\n"
"cares_msgs/ActuationFeedback actuation_feedback\n"
"\n"
"\n"
"================================================================================\n"
"MSG: cares_msgs/ActuationFeedback\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"uint8 INIT       = 0\n"
"uint8 MOVING_TO_APPROACH = 1\n"
"uint8 MOVING_TO_TARGET   = 3\n"
"uint8 MOVING_BACK_TO_APPROACH   = 4\n"
"uint8 ACTUATING          = 5\n"
"uint8 STOPPING           = 6\n"
"\n"
"uint8 feedback\n"
"\n"
;
  }

  static const char* value(const ::cares_msgs::ThinFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cares_msgs::ThinFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.count);
      stream.next(m.total);
      stream.next(m.status);
      stream.next(m.actuation_feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ThinFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cares_msgs::ThinFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cares_msgs::ThinFeedback_<ContainerAllocator>& v)
  {
    s << indent << "count: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.count);
    s << indent << "total: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.total);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "actuation_feedback: ";
    s << std::endl;
    Printer< ::cares_msgs::ActuationFeedback_<ContainerAllocator> >::stream(s, indent + "  ", v.actuation_feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARES_MSGS_MESSAGE_THINFEEDBACK_H

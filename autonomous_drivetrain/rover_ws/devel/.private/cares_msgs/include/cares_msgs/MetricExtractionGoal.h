// Generated by gencpp from file cares_msgs/MetricExtractionGoal.msg
// DO NOT EDIT!


#ifndef CARES_MSGS_MESSAGE_METRICEXTRACTIONGOAL_H
#define CARES_MSGS_MESSAGE_METRICEXTRACTIONGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>

namespace cares_msgs
{
template <class ContainerAllocator>
struct MetricExtractionGoal_
{
  typedef MetricExtractionGoal_<ContainerAllocator> Type;

  MetricExtractionGoal_()
    : command(0)
    , file_path()  {
    }
  MetricExtractionGoal_(const ContainerAllocator& _alloc)
    : command(0)
    , file_path(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _command_type;
  _command_type command;

   typedef  ::std_msgs::String_<ContainerAllocator>  _file_path_type;
  _file_path_type file_path;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RESET)
  #undef RESET
#endif
#if defined(_WIN32) && defined(CAPTURE)
  #undef CAPTURE
#endif
#if defined(_WIN32) && defined(MEASURE)
  #undef MEASURE
#endif

  enum {
    RESET = 0u,
    CAPTURE = 1u,
    MEASURE = 2u,
  };


  typedef boost::shared_ptr< ::cares_msgs::MetricExtractionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cares_msgs::MetricExtractionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MetricExtractionGoal_

typedef ::cares_msgs::MetricExtractionGoal_<std::allocator<void> > MetricExtractionGoal;

typedef boost::shared_ptr< ::cares_msgs::MetricExtractionGoal > MetricExtractionGoalPtr;
typedef boost::shared_ptr< ::cares_msgs::MetricExtractionGoal const> MetricExtractionGoalConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cares_msgs::MetricExtractionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cares_msgs::MetricExtractionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cares_msgs::MetricExtractionGoal_<ContainerAllocator1> & lhs, const ::cares_msgs::MetricExtractionGoal_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command &&
    lhs.file_path == rhs.file_path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cares_msgs::MetricExtractionGoal_<ContainerAllocator1> & lhs, const ::cares_msgs::MetricExtractionGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cares_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::MetricExtractionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::MetricExtractionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::MetricExtractionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::MetricExtractionGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::MetricExtractionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::MetricExtractionGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cares_msgs::MetricExtractionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f545d4613a4081da8300fe4c843f5db4";
  }

  static const char* value(const ::cares_msgs::MetricExtractionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf545d4613a4081daULL;
  static const uint64_t static_value2 = 0x8300fe4c843f5db4ULL;
};

template<class ContainerAllocator>
struct DataType< ::cares_msgs::MetricExtractionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cares_msgs/MetricExtractionGoal";
  }

  static const char* value(const ::cares_msgs::MetricExtractionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cares_msgs::MetricExtractionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"# Arm Command Enumeration\n"
"uint8 RESET    = 0\n"
"uint8 CAPTURE  = 1\n"
"uint8 MEASURE  = 2\n"
"\n"
"# Arm command\n"
"uint8 command\n"
"\n"
"# Path to save data too\n"
"std_msgs/String file_path\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::cares_msgs::MetricExtractionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cares_msgs::MetricExtractionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.file_path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MetricExtractionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cares_msgs::MetricExtractionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cares_msgs::MetricExtractionGoal_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
    s << indent << "file_path: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.file_path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARES_MSGS_MESSAGE_METRICEXTRACTIONGOAL_H

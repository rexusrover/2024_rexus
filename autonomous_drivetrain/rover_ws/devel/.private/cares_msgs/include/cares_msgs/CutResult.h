// Generated by gencpp from file cares_msgs/CutResult.msg
// DO NOT EDIT!


#ifndef CARES_MSGS_MESSAGE_CUTRESULT_H
#define CARES_MSGS_MESSAGE_CUTRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cares_msgs/CutPoint.h>
#include <cares_msgs/CutPoint.h>

namespace cares_msgs
{
template <class ContainerAllocator>
struct CutResult_
{
  typedef CutResult_<ContainerAllocator> Type;

  CutResult_()
    : result(0)
    , successful_cuts()
    , failed_cuts()  {
    }
  CutResult_(const ContainerAllocator& _alloc)
    : result(0)
    , successful_cuts(_alloc)
    , failed_cuts(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _result_type;
  _result_type result;

   typedef std::vector< ::cares_msgs::CutPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cares_msgs::CutPoint_<ContainerAllocator> >> _successful_cuts_type;
  _successful_cuts_type successful_cuts;

   typedef std::vector< ::cares_msgs::CutPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cares_msgs::CutPoint_<ContainerAllocator> >> _failed_cuts_type;
  _failed_cuts_type failed_cuts;





  typedef boost::shared_ptr< ::cares_msgs::CutResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cares_msgs::CutResult_<ContainerAllocator> const> ConstPtr;

}; // struct CutResult_

typedef ::cares_msgs::CutResult_<std::allocator<void> > CutResult;

typedef boost::shared_ptr< ::cares_msgs::CutResult > CutResultPtr;
typedef boost::shared_ptr< ::cares_msgs::CutResult const> CutResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cares_msgs::CutResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cares_msgs::CutResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cares_msgs::CutResult_<ContainerAllocator1> & lhs, const ::cares_msgs::CutResult_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.successful_cuts == rhs.successful_cuts &&
    lhs.failed_cuts == rhs.failed_cuts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cares_msgs::CutResult_<ContainerAllocator1> & lhs, const ::cares_msgs::CutResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cares_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::CutResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::CutResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::CutResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::CutResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::CutResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::CutResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cares_msgs::CutResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e20698bfa6757b52e96eeb2fe94ba71b";
  }

  static const char* value(const ::cares_msgs::CutResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe20698bfa6757b52ULL;
  static const uint64_t static_value2 = 0xe96eeb2fe94ba71bULL;
};

template<class ContainerAllocator>
struct DataType< ::cares_msgs::CutResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cares_msgs/CutResult";
  }

  static const char* value(const ::cares_msgs::CutResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cares_msgs::CutResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"uint8 result\n"
"cares_msgs/CutPoint[] successful_cuts\n"
"cares_msgs/CutPoint[] failed_cuts\n"
"\n"
"================================================================================\n"
"MSG: cares_msgs/CutPoint\n"
"geometry_msgs/Point cut_point_a\n"
"geometry_msgs/Point cut_point_b\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cares_msgs::CutResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cares_msgs::CutResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.successful_cuts);
      stream.next(m.failed_cuts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CutResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cares_msgs::CutResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cares_msgs::CutResult_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
    s << indent << "successful_cuts[]" << std::endl;
    for (size_t i = 0; i < v.successful_cuts.size(); ++i)
    {
      s << indent << "  successful_cuts[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cares_msgs::CutPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.successful_cuts[i]);
    }
    s << indent << "failed_cuts[]" << std::endl;
    for (size_t i = 0; i < v.failed_cuts.size(); ++i)
    {
      s << indent << "  failed_cuts[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cares_msgs::CutPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.failed_cuts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARES_MSGS_MESSAGE_CUTRESULT_H

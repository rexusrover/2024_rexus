// Generated by gencpp from file cares_msgs/ThinGoal.msg
// DO NOT EDIT!


#ifndef CARES_MSGS_MESSAGE_THINGOAL_H
#define CARES_MSGS_MESSAGE_THINGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cares_msgs/Fruitlet.h>

namespace cares_msgs
{
template <class ContainerAllocator>
struct ThinGoal_
{
  typedef ThinGoal_<ContainerAllocator> Type;

  ThinGoal_()
    : command(0)
    , thinning_frame()
    , planning_frame()
    , fruitlets()  {
    }
  ThinGoal_(const ContainerAllocator& _alloc)
    : command(0)
    , thinning_frame(_alloc)
    , planning_frame(_alloc)
    , fruitlets(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _command_type;
  _command_type command;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _thinning_frame_type;
  _thinning_frame_type thinning_frame;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _planning_frame_type;
  _planning_frame_type planning_frame;

   typedef std::vector< ::cares_msgs::Fruitlet_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cares_msgs::Fruitlet_<ContainerAllocator> >> _fruitlets_type;
  _fruitlets_type fruitlets;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(THIN)
  #undef THIN
#endif
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif

  enum {
    THIN = 0u,
    STOP = 1u,
  };


  typedef boost::shared_ptr< ::cares_msgs::ThinGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cares_msgs::ThinGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ThinGoal_

typedef ::cares_msgs::ThinGoal_<std::allocator<void> > ThinGoal;

typedef boost::shared_ptr< ::cares_msgs::ThinGoal > ThinGoalPtr;
typedef boost::shared_ptr< ::cares_msgs::ThinGoal const> ThinGoalConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cares_msgs::ThinGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cares_msgs::ThinGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cares_msgs::ThinGoal_<ContainerAllocator1> & lhs, const ::cares_msgs::ThinGoal_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command &&
    lhs.thinning_frame == rhs.thinning_frame &&
    lhs.planning_frame == rhs.planning_frame &&
    lhs.fruitlets == rhs.fruitlets;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cares_msgs::ThinGoal_<ContainerAllocator1> & lhs, const ::cares_msgs::ThinGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cares_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::ThinGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::ThinGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::ThinGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::ThinGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::ThinGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::ThinGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cares_msgs::ThinGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a338ed5ae0657bbc06b75728fb076848";
  }

  static const char* value(const ::cares_msgs::ThinGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa338ed5ae0657bbcULL;
  static const uint64_t static_value2 = 0x06b75728fb076848ULL;
};

template<class ContainerAllocator>
struct DataType< ::cares_msgs::ThinGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cares_msgs/ThinGoal";
  }

  static const char* value(const ::cares_msgs::ThinGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cares_msgs::ThinGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"uint8 THIN = 0\n"
"uint8 STOP = 1\n"
"uint8 command\n"
"\n"
"string thinning_frame\n"
"string planning_frame\n"
"cares_msgs/Fruitlet[] fruitlets\n"
"\n"
"================================================================================\n"
"MSG: cares_msgs/Fruitlet\n"
"uint8 ID\n"
"geometry_msgs/Point centroid\n"
"geometry_msgs/Point calyx \n"
"float32 radius\n"
"bool chosen_one\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cares_msgs::ThinGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cares_msgs::ThinGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.thinning_frame);
      stream.next(m.planning_frame);
      stream.next(m.fruitlets);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ThinGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cares_msgs::ThinGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cares_msgs::ThinGoal_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
    s << indent << "thinning_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.thinning_frame);
    s << indent << "planning_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.planning_frame);
    s << indent << "fruitlets[]" << std::endl;
    for (size_t i = 0; i < v.fruitlets.size(); ++i)
    {
      s << indent << "  fruitlets[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cares_msgs::Fruitlet_<ContainerAllocator> >::stream(s, indent + "    ", v.fruitlets[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARES_MSGS_MESSAGE_THINGOAL_H

// Generated by gencpp from file cares_msgs/Node.msg
// DO NOT EDIT!


#ifndef CARES_MSGS_MESSAGE_NODE_H
#define CARES_MSGS_MESSAGE_NODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <cares_msgs/NodeNeighbourInfo.h>

namespace cares_msgs
{
template <class ContainerAllocator>
struct Node_
{
  typedef Node_<ContainerAllocator> Type;

  Node_()
    : node_id(0)
    , node_type(0)
    , position()
    , sequencial_neighbour_id(0)
    , neighbours()  {
    }
  Node_(const ContainerAllocator& _alloc)
    : node_id(0)
    , node_type(0)
    , position(_alloc)
    , sequencial_neighbour_id(0)
    , neighbours(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _node_id_type;
  _node_id_type node_id;

   typedef uint8_t _node_type_type;
  _node_type_type node_type;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef uint32_t _sequencial_neighbour_id_type;
  _sequencial_neighbour_id_type sequencial_neighbour_id;

   typedef std::vector< ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator> >> _neighbours_type;
  _neighbours_type neighbours;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PRIMARY_ORIGIN_NODE)
  #undef PRIMARY_ORIGIN_NODE
#endif
#if defined(_WIN32) && defined(REGULAR_NODE)
  #undef REGULAR_NODE
#endif
#if defined(_WIN32) && defined(MULTI_NODE)
  #undef MULTI_NODE
#endif
#if defined(_WIN32) && defined(UNLINKED_NODE)
  #undef UNLINKED_NODE
#endif

  enum {
    PRIMARY_ORIGIN_NODE = 0u,
    REGULAR_NODE = 1u,
    MULTI_NODE = 2u,
    UNLINKED_NODE = 3u,
  };


  typedef boost::shared_ptr< ::cares_msgs::Node_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cares_msgs::Node_<ContainerAllocator> const> ConstPtr;

}; // struct Node_

typedef ::cares_msgs::Node_<std::allocator<void> > Node;

typedef boost::shared_ptr< ::cares_msgs::Node > NodePtr;
typedef boost::shared_ptr< ::cares_msgs::Node const> NodeConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cares_msgs::Node_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cares_msgs::Node_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cares_msgs::Node_<ContainerAllocator1> & lhs, const ::cares_msgs::Node_<ContainerAllocator2> & rhs)
{
  return lhs.node_id == rhs.node_id &&
    lhs.node_type == rhs.node_type &&
    lhs.position == rhs.position &&
    lhs.sequencial_neighbour_id == rhs.sequencial_neighbour_id &&
    lhs.neighbours == rhs.neighbours;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cares_msgs::Node_<ContainerAllocator1> & lhs, const ::cares_msgs::Node_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cares_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::Node_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::Node_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::Node_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::Node_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::Node_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::Node_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cares_msgs::Node_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9d632a96747680a83b13f1ba6df5723";
  }

  static const char* value(const ::cares_msgs::Node_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9d632a96747680aULL;
  static const uint64_t static_value2 = 0x83b13f1ba6df5723ULL;
};

template<class ContainerAllocator>
struct DataType< ::cares_msgs::Node_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cares_msgs/Node";
  }

  static const char* value(const ::cares_msgs::Node_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cares_msgs::Node_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 node_id\n"
"\n"
"#Node Type\n"
"uint8  PRIMARY_ORIGIN_NODE = 0\n"
"uint8  REGULAR_NODE = 1\n"
"uint8  MULTI_NODE = 2\n"
"uint8  UNLINKED_NODE = 3\n"
"uint8  node_type\n"
"\n"
"geometry_msgs/Point position\n"
"\n"
"uint32 sequencial_neighbour_id\n"
"cares_msgs/NodeNeighbourInfo[] neighbours\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: cares_msgs/NodeNeighbourInfo\n"
"uint32 neighbour_id\n"
"float64 internode_length\n"
"float64 internode_width\n"
;
  }

  static const char* value(const ::cares_msgs::Node_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cares_msgs::Node_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node_id);
      stream.next(m.node_type);
      stream.next(m.position);
      stream.next(m.sequencial_neighbour_id);
      stream.next(m.neighbours);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Node_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cares_msgs::Node_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cares_msgs::Node_<ContainerAllocator>& v)
  {
    s << indent << "node_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.node_id);
    s << indent << "node_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.node_type);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "sequencial_neighbour_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sequencial_neighbour_id);
    s << indent << "neighbours[]" << std::endl;
    for (size_t i = 0; i < v.neighbours.size(); ++i)
    {
      s << indent << "  neighbours[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.neighbours[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARES_MSGS_MESSAGE_NODE_H

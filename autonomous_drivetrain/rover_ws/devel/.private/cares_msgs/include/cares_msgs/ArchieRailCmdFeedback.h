// Generated by gencpp from file cares_msgs/ArchieRailCmdFeedback.msg
// DO NOT EDIT!


#ifndef CARES_MSGS_MESSAGE_ARCHIERAILCMDFEEDBACK_H
#define CARES_MSGS_MESSAGE_ARCHIERAILCMDFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace cares_msgs
{
template <class ContainerAllocator>
struct ArchieRailCmdFeedback_
{
  typedef ArchieRailCmdFeedback_<ContainerAllocator> Type;

  ArchieRailCmdFeedback_()
    : status(0)
    , pose()  {
    }
  ArchieRailCmdFeedback_(const ContainerAllocator& _alloc)
    : status(0)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_type;
  _pose_type pose;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(INIT)
  #undef INIT
#endif
#if defined(_WIN32) && defined(MOVING)
  #undef MOVING
#endif
#if defined(_WIN32) && defined(STOPPING)
  #undef STOPPING
#endif
#if defined(_WIN32) && defined(RESETTING)
  #undef RESETTING
#endif
#if defined(_WIN32) && defined(STARTING)
  #undef STARTING
#endif
#if defined(_WIN32) && defined(HOMING)
  #undef HOMING
#endif

  enum {
    INIT = 0u,
    MOVING = 1u,
    STOPPING = 2u,
    RESETTING = 3u,
    STARTING = 4u,
    HOMING = 5u,
  };


  typedef boost::shared_ptr< ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ArchieRailCmdFeedback_

typedef ::cares_msgs::ArchieRailCmdFeedback_<std::allocator<void> > ArchieRailCmdFeedback;

typedef boost::shared_ptr< ::cares_msgs::ArchieRailCmdFeedback > ArchieRailCmdFeedbackPtr;
typedef boost::shared_ptr< ::cares_msgs::ArchieRailCmdFeedback const> ArchieRailCmdFeedbackConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator1> & lhs, const ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator1> & lhs, const ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cares_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d785020fbd54bcc8252a9b2d63da77d";
  }

  static const char* value(const ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d785020fbd54bccULL;
  static const uint64_t static_value2 = 0x8252a9b2d63da77dULL;
};

template<class ContainerAllocator>
struct DataType< ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cares_msgs/ArchieRailCmdFeedback";
  }

  static const char* value(const ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"uint8 INIT      = 0\n"
"uint8 MOVING    = 1\n"
"uint8 STOPPING  = 2\n"
"uint8 RESETTING = 3\n"
"uint8 STARTING  = 4\n"
"uint8 HOMING    = 5\n"
"\n"
"# 5-255 reserved for future use\n"
"uint8 status\n"
"\n"
"geometry_msgs/PoseStamped pose\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArchieRailCmdFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cares_msgs::ArchieRailCmdFeedback_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARES_MSGS_MESSAGE_ARCHIERAILCMDFEEDBACK_H

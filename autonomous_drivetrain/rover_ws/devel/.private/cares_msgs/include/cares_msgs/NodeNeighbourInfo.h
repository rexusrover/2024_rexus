// Generated by gencpp from file cares_msgs/NodeNeighbourInfo.msg
// DO NOT EDIT!


#ifndef CARES_MSGS_MESSAGE_NODENEIGHBOURINFO_H
#define CARES_MSGS_MESSAGE_NODENEIGHBOURINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cares_msgs
{
template <class ContainerAllocator>
struct NodeNeighbourInfo_
{
  typedef NodeNeighbourInfo_<ContainerAllocator> Type;

  NodeNeighbourInfo_()
    : neighbour_id(0)
    , internode_length(0.0)
    , internode_width(0.0)  {
    }
  NodeNeighbourInfo_(const ContainerAllocator& _alloc)
    : neighbour_id(0)
    , internode_length(0.0)
    , internode_width(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _neighbour_id_type;
  _neighbour_id_type neighbour_id;

   typedef double _internode_length_type;
  _internode_length_type internode_length;

   typedef double _internode_width_type;
  _internode_width_type internode_width;





  typedef boost::shared_ptr< ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator> const> ConstPtr;

}; // struct NodeNeighbourInfo_

typedef ::cares_msgs::NodeNeighbourInfo_<std::allocator<void> > NodeNeighbourInfo;

typedef boost::shared_ptr< ::cares_msgs::NodeNeighbourInfo > NodeNeighbourInfoPtr;
typedef boost::shared_ptr< ::cares_msgs::NodeNeighbourInfo const> NodeNeighbourInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator1> & lhs, const ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator2> & rhs)
{
  return lhs.neighbour_id == rhs.neighbour_id &&
    lhs.internode_length == rhs.internode_length &&
    lhs.internode_width == rhs.internode_width;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator1> & lhs, const ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cares_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3aef3f6e3c3519213f12eb0d4b43fe3e";
  }

  static const char* value(const ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3aef3f6e3c351921ULL;
  static const uint64_t static_value2 = 0x3f12eb0d4b43fe3eULL;
};

template<class ContainerAllocator>
struct DataType< ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cares_msgs/NodeNeighbourInfo";
  }

  static const char* value(const ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 neighbour_id\n"
"float64 internode_length\n"
"float64 internode_width\n"
;
  }

  static const char* value(const ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.neighbour_id);
      stream.next(m.internode_length);
      stream.next(m.internode_width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NodeNeighbourInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cares_msgs::NodeNeighbourInfo_<ContainerAllocator>& v)
  {
    s << indent << "neighbour_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.neighbour_id);
    s << indent << "internode_length: ";
    Printer<double>::stream(s, indent + "  ", v.internode_length);
    s << indent << "internode_width: ";
    Printer<double>::stream(s, indent + "  ", v.internode_width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARES_MSGS_MESSAGE_NODENEIGHBOURINFO_H

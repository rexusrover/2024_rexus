// Generated by gencpp from file cares_msgs/ActuationResult.msg
// DO NOT EDIT!


#ifndef CARES_MSGS_MESSAGE_ACTUATIONRESULT_H
#define CARES_MSGS_MESSAGE_ACTUATIONRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cares_msgs
{
template <class ContainerAllocator>
struct ActuationResult_
{
  typedef ActuationResult_<ContainerAllocator> Type;

  ActuationResult_()
    : result(0)
    , failure_reason(0)  {
    }
  ActuationResult_(const ContainerAllocator& _alloc)
    : result(0)
    , failure_reason(0)  {
  (void)_alloc;
    }



   typedef uint8_t _result_type;
  _result_type result;

   typedef uint8_t _failure_reason_type;
  _failure_reason_type failure_reason;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FAILED_TO_REACH_APPROACH)
  #undef FAILED_TO_REACH_APPROACH
#endif
#if defined(_WIN32) && defined(FAILED_TO_REACH_TARGET)
  #undef FAILED_TO_REACH_TARGET
#endif
#if defined(_WIN32) && defined(ACTUATOR_NOT_OPEN)
  #undef ACTUATOR_NOT_OPEN
#endif
#if defined(_WIN32) && defined(FAILED_TO_ACTUATE)
  #undef FAILED_TO_ACTUATE
#endif

  enum {
    FAILED_TO_REACH_APPROACH = 0u,
    FAILED_TO_REACH_TARGET = 1u,
    ACTUATOR_NOT_OPEN = 2u,
    FAILED_TO_ACTUATE = 3u,
  };


  typedef boost::shared_ptr< ::cares_msgs::ActuationResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cares_msgs::ActuationResult_<ContainerAllocator> const> ConstPtr;

}; // struct ActuationResult_

typedef ::cares_msgs::ActuationResult_<std::allocator<void> > ActuationResult;

typedef boost::shared_ptr< ::cares_msgs::ActuationResult > ActuationResultPtr;
typedef boost::shared_ptr< ::cares_msgs::ActuationResult const> ActuationResultConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cares_msgs::ActuationResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cares_msgs::ActuationResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cares_msgs::ActuationResult_<ContainerAllocator1> & lhs, const ::cares_msgs::ActuationResult_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.failure_reason == rhs.failure_reason;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cares_msgs::ActuationResult_<ContainerAllocator1> & lhs, const ::cares_msgs::ActuationResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cares_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::ActuationResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::ActuationResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::ActuationResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::ActuationResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::ActuationResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::ActuationResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cares_msgs::ActuationResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "081cd5fc5c591111cd712dd6bca9d6fd";
  }

  static const char* value(const ::cares_msgs::ActuationResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x081cd5fc5c591111ULL;
  static const uint64_t static_value2 = 0xcd712dd6bca9d6fdULL;
};

template<class ContainerAllocator>
struct DataType< ::cares_msgs::ActuationResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cares_msgs/ActuationResult";
  }

  static const char* value(const ::cares_msgs::ActuationResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cares_msgs::ActuationResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"uint8 result\n"
"uint8 FAILED_TO_REACH_APPROACH = 0\n"
"uint8 FAILED_TO_REACH_TARGET = 1\n"
"uint8 ACTUATOR_NOT_OPEN = 2\n"
"uint8 FAILED_TO_ACTUATE = 3\n"
"uint8 failure_reason\n"
"\n"
;
  }

  static const char* value(const ::cares_msgs::ActuationResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cares_msgs::ActuationResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.failure_reason);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActuationResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cares_msgs::ActuationResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cares_msgs::ActuationResult_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
    s << indent << "failure_reason: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.failure_reason);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARES_MSGS_MESSAGE_ACTUATIONRESULT_H

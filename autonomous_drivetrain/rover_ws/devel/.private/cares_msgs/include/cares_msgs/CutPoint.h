// Generated by gencpp from file cares_msgs/CutPoint.msg
// DO NOT EDIT!


#ifndef CARES_MSGS_MESSAGE_CUTPOINT_H
#define CARES_MSGS_MESSAGE_CUTPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace cares_msgs
{
template <class ContainerAllocator>
struct CutPoint_
{
  typedef CutPoint_<ContainerAllocator> Type;

  CutPoint_()
    : cut_point_a()
    , cut_point_b()  {
    }
  CutPoint_(const ContainerAllocator& _alloc)
    : cut_point_a(_alloc)
    , cut_point_b(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _cut_point_a_type;
  _cut_point_a_type cut_point_a;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _cut_point_b_type;
  _cut_point_b_type cut_point_b;





  typedef boost::shared_ptr< ::cares_msgs::CutPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cares_msgs::CutPoint_<ContainerAllocator> const> ConstPtr;

}; // struct CutPoint_

typedef ::cares_msgs::CutPoint_<std::allocator<void> > CutPoint;

typedef boost::shared_ptr< ::cares_msgs::CutPoint > CutPointPtr;
typedef boost::shared_ptr< ::cares_msgs::CutPoint const> CutPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cares_msgs::CutPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cares_msgs::CutPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cares_msgs::CutPoint_<ContainerAllocator1> & lhs, const ::cares_msgs::CutPoint_<ContainerAllocator2> & rhs)
{
  return lhs.cut_point_a == rhs.cut_point_a &&
    lhs.cut_point_b == rhs.cut_point_b;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cares_msgs::CutPoint_<ContainerAllocator1> & lhs, const ::cares_msgs::CutPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cares_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::CutPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::CutPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::CutPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::CutPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::CutPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::CutPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cares_msgs::CutPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc7606e3618b83242d933976407b43fe";
  }

  static const char* value(const ::cares_msgs::CutPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc7606e3618b8324ULL;
  static const uint64_t static_value2 = 0x2d933976407b43feULL;
};

template<class ContainerAllocator>
struct DataType< ::cares_msgs::CutPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cares_msgs/CutPoint";
  }

  static const char* value(const ::cares_msgs::CutPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cares_msgs::CutPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point cut_point_a\n"
"geometry_msgs/Point cut_point_b\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cares_msgs::CutPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cares_msgs::CutPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cut_point_a);
      stream.next(m.cut_point_b);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CutPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cares_msgs::CutPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cares_msgs::CutPoint_<ContainerAllocator>& v)
  {
    s << indent << "cut_point_a: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.cut_point_a);
    s << indent << "cut_point_b: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.cut_point_b);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARES_MSGS_MESSAGE_CUTPOINT_H

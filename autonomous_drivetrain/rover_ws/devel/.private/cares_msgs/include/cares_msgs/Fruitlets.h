// Generated by gencpp from file cares_msgs/Fruitlets.msg
// DO NOT EDIT!


#ifndef CARES_MSGS_MESSAGE_FRUITLETS_H
#define CARES_MSGS_MESSAGE_FRUITLETS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cares_msgs/Fruitlet.h>

namespace cares_msgs
{
template <class ContainerAllocator>
struct Fruitlets_
{
  typedef Fruitlets_<ContainerAllocator> Type;

  Fruitlets_()
    : fruitlets()  {
    }
  Fruitlets_(const ContainerAllocator& _alloc)
    : fruitlets(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::cares_msgs::Fruitlet_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cares_msgs::Fruitlet_<ContainerAllocator> >> _fruitlets_type;
  _fruitlets_type fruitlets;





  typedef boost::shared_ptr< ::cares_msgs::Fruitlets_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cares_msgs::Fruitlets_<ContainerAllocator> const> ConstPtr;

}; // struct Fruitlets_

typedef ::cares_msgs::Fruitlets_<std::allocator<void> > Fruitlets;

typedef boost::shared_ptr< ::cares_msgs::Fruitlets > FruitletsPtr;
typedef boost::shared_ptr< ::cares_msgs::Fruitlets const> FruitletsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cares_msgs::Fruitlets_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cares_msgs::Fruitlets_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cares_msgs::Fruitlets_<ContainerAllocator1> & lhs, const ::cares_msgs::Fruitlets_<ContainerAllocator2> & rhs)
{
  return lhs.fruitlets == rhs.fruitlets;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cares_msgs::Fruitlets_<ContainerAllocator1> & lhs, const ::cares_msgs::Fruitlets_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cares_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::Fruitlets_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::Fruitlets_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::Fruitlets_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::Fruitlets_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::Fruitlets_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::Fruitlets_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cares_msgs::Fruitlets_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a50bac84a40bdba57cf28160438a73e";
  }

  static const char* value(const ::cares_msgs::Fruitlets_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a50bac84a40bdbaULL;
  static const uint64_t static_value2 = 0x57cf28160438a73eULL;
};

template<class ContainerAllocator>
struct DataType< ::cares_msgs::Fruitlets_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cares_msgs/Fruitlets";
  }

  static const char* value(const ::cares_msgs::Fruitlets_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cares_msgs::Fruitlets_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cares_msgs/Fruitlet[] fruitlets \n"
"\n"
"================================================================================\n"
"MSG: cares_msgs/Fruitlet\n"
"uint8 ID\n"
"geometry_msgs/Point centroid\n"
"geometry_msgs/Point calyx \n"
"float32 radius\n"
"bool chosen_one\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cares_msgs::Fruitlets_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cares_msgs::Fruitlets_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fruitlets);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Fruitlets_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cares_msgs::Fruitlets_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cares_msgs::Fruitlets_<ContainerAllocator>& v)
  {
    s << indent << "fruitlets[]" << std::endl;
    for (size_t i = 0; i < v.fruitlets.size(); ++i)
    {
      s << indent << "  fruitlets[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cares_msgs::Fruitlet_<ContainerAllocator> >::stream(s, indent + "    ", v.fruitlets[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARES_MSGS_MESSAGE_FRUITLETS_H

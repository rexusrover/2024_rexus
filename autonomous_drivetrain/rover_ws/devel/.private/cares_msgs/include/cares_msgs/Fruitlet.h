// Generated by gencpp from file cares_msgs/Fruitlet.msg
// DO NOT EDIT!


#ifndef CARES_MSGS_MESSAGE_FRUITLET_H
#define CARES_MSGS_MESSAGE_FRUITLET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace cares_msgs
{
template <class ContainerAllocator>
struct Fruitlet_
{
  typedef Fruitlet_<ContainerAllocator> Type;

  Fruitlet_()
    : ID(0)
    , centroid()
    , calyx()
    , radius(0.0)
    , chosen_one(false)  {
    }
  Fruitlet_(const ContainerAllocator& _alloc)
    : ID(0)
    , centroid(_alloc)
    , calyx(_alloc)
    , radius(0.0)
    , chosen_one(false)  {
  (void)_alloc;
    }



   typedef uint8_t _ID_type;
  _ID_type ID;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _centroid_type;
  _centroid_type centroid;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _calyx_type;
  _calyx_type calyx;

   typedef float _radius_type;
  _radius_type radius;

   typedef uint8_t _chosen_one_type;
  _chosen_one_type chosen_one;





  typedef boost::shared_ptr< ::cares_msgs::Fruitlet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cares_msgs::Fruitlet_<ContainerAllocator> const> ConstPtr;

}; // struct Fruitlet_

typedef ::cares_msgs::Fruitlet_<std::allocator<void> > Fruitlet;

typedef boost::shared_ptr< ::cares_msgs::Fruitlet > FruitletPtr;
typedef boost::shared_ptr< ::cares_msgs::Fruitlet const> FruitletConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cares_msgs::Fruitlet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cares_msgs::Fruitlet_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cares_msgs::Fruitlet_<ContainerAllocator1> & lhs, const ::cares_msgs::Fruitlet_<ContainerAllocator2> & rhs)
{
  return lhs.ID == rhs.ID &&
    lhs.centroid == rhs.centroid &&
    lhs.calyx == rhs.calyx &&
    lhs.radius == rhs.radius &&
    lhs.chosen_one == rhs.chosen_one;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cares_msgs::Fruitlet_<ContainerAllocator1> & lhs, const ::cares_msgs::Fruitlet_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cares_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::Fruitlet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cares_msgs::Fruitlet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::Fruitlet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cares_msgs::Fruitlet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::Fruitlet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cares_msgs::Fruitlet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cares_msgs::Fruitlet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6af9bf7da42bdf2fe66980eb97b7b05";
  }

  static const char* value(const ::cares_msgs::Fruitlet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6af9bf7da42bdf2ULL;
  static const uint64_t static_value2 = 0xfe66980eb97b7b05ULL;
};

template<class ContainerAllocator>
struct DataType< ::cares_msgs::Fruitlet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cares_msgs/Fruitlet";
  }

  static const char* value(const ::cares_msgs::Fruitlet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cares_msgs::Fruitlet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 ID\n"
"geometry_msgs/Point centroid\n"
"geometry_msgs/Point calyx \n"
"float32 radius\n"
"bool chosen_one\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cares_msgs::Fruitlet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cares_msgs::Fruitlet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.centroid);
      stream.next(m.calyx);
      stream.next(m.radius);
      stream.next(m.chosen_one);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Fruitlet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cares_msgs::Fruitlet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cares_msgs::Fruitlet_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ID);
    s << indent << "centroid: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.centroid);
    s << indent << "calyx: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.calyx);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "chosen_one: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.chosen_one);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARES_MSGS_MESSAGE_FRUITLET_H
